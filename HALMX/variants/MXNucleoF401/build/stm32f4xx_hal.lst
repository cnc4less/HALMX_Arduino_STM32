ARM GAS  /var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//ccFeBzyd.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"stm32f4xx_hal.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.HAL_MspInit,"ax",%progbits
  19              		.align	1
  20              		.weak	HAL_MspInit
  21              		.thumb
  22              		.thumb_func
  24              	HAL_MspInit:
  25              	.LFB127:
  26              		.file 1 "Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c"
   1:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** /**
   2:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   ******************************************************************************
   3:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @file    stm32f4xx_hal.c
   4:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @author  MCD Application Team
   5:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @version V1.4.3
   6:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @date    11-December-2015
   7:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @brief   HAL module driver.
   8:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   *          This is the common part of the HAL initialization
   9:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   *
  10:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   @verbatim
  11:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   ==============================================================================
  12:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****                      ##### How to use this driver #####
  13:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   ==============================================================================
  14:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****     [..]
  15:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****     The common HAL driver contains a set of generic and common APIs that can be
  16:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****     used by the PPP peripheral drivers and the user to start using the HAL. 
  17:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****     [..]
  18:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****     The HAL contains two APIs' categories: 
  19:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****          (+) Common HAL APIs
  20:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****          (+) Services HAL APIs
  21:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** 
  22:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   @endverbatim
  23:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   ******************************************************************************
  24:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @attention
  25:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   *
  26:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * <h2><center>&copy; COPYRIGHT(c) 2015 STMicroelectronics</center></h2>
  27:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   *
  28:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * Redistribution and use in source and binary forms, with or without modification,
  29:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * are permitted provided that the following conditions are met:
  30:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  31:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   *      this list of conditions and the following disclaimer.
  32:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
ARM GAS  /var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//ccFeBzyd.s 			page 2


  33:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   *      this list of conditions and the following disclaimer in the documentation
  34:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   *      and/or other materials provided with the distribution.
  35:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  36:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   *      may be used to endorse or promote products derived from this software
  37:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   *      without specific prior written permission.
  38:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   *
  39:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  40:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  41:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  42:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  43:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  44:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  45:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  46:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  47:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  48:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  49:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   *
  50:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   ******************************************************************************
  51:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   */ 
  52:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** 
  53:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** /* Includes ------------------------------------------------------------------*/
  54:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** #include "stm32f4xx_hal.h"
  55:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** 
  56:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** /** @addtogroup STM32F4xx_HAL_Driver
  57:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @{
  58:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   */
  59:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** 
  60:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** /** @defgroup HAL HAL
  61:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @brief HAL module driver.
  62:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @{
  63:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   */
  64:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** 
  65:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** /* Private typedef -----------------------------------------------------------*/
  66:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** /* Private define ------------------------------------------------------------*/
  67:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** /** @addtogroup HAL_Private_Constants
  68:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @{
  69:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   */
  70:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** /**
  71:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @brief STM32F4xx HAL Driver version number V1.4.3
  72:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   */
  73:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** #define __STM32F4xx_HAL_VERSION_MAIN   (0x01) /*!< [31:24] main version */
  74:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** #define __STM32F4xx_HAL_VERSION_SUB1   (0x04) /*!< [23:16] sub1 version */
  75:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** #define __STM32F4xx_HAL_VERSION_SUB2   (0x03) /*!< [15:8]  sub2 version */
  76:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** #define __STM32F4xx_HAL_VERSION_RC     (0x00) /*!< [7:0]  release candidate */ 
  77:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** #define __STM32F4xx_HAL_VERSION         ((__STM32F4xx_HAL_VERSION_MAIN << 24)\
  78:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****                                         |(__STM32F4xx_HAL_VERSION_SUB1 << 16)\
  79:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****                                         |(__STM32F4xx_HAL_VERSION_SUB2 << 8 )\
  80:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****                                         |(__STM32F4xx_HAL_VERSION_RC))
  81:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****                                         
  82:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** #define IDCODE_DEVID_MASK    ((uint32_t)0x00000FFF)
  83:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** 
  84:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** /* ------------ RCC registers bit address in the alias region ----------- */
  85:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** #define SYSCFG_OFFSET             (SYSCFG_BASE - PERIPH_BASE)
  86:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** /* ---  MEMRMP Register ---*/ 
  87:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** /* Alias word address of UFB_MODE bit */ 
  88:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** #define MEMRMP_OFFSET             SYSCFG_OFFSET 
  89:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** #define UFB_MODE_BIT_NUMBER       POSITION_VAL(SYSCFG_MEMRMP_UFB_MODE)
ARM GAS  /var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//ccFeBzyd.s 			page 3


  90:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** #define UFB_MODE_BB               (uint32_t)(PERIPH_BB_BASE + (MEMRMP_OFFSET * 32) + (UFB_MODE_BIT_
  91:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** 
  92:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** /* ---  CMPCR Register ---*/ 
  93:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** /* Alias word address of CMP_PD bit */ 
  94:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** #define CMPCR_OFFSET              (SYSCFG_OFFSET + 0x20) 
  95:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** #define CMP_PD_BIT_NUMBER         POSITION_VAL(SYSCFG_CMPCR_CMP_PD)
  96:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** #define CMPCR_CMP_PD_BB           (uint32_t)(PERIPH_BB_BASE + (CMPCR_OFFSET * 32) + (CMP_PD_BIT_NUM
  97:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** /**
  98:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @}
  99:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   */
 100:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** 
 101:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** /* Private macro -------------------------------------------------------------*/
 102:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** /* Private variables ---------------------------------------------------------*/
 103:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** /** @addtogroup HAL_Private_Variables
 104:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @{
 105:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   */
 106:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** static __IO uint32_t uwTick;
 107:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** /**
 108:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @}
 109:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   */
 110:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** /* Private function prototypes -----------------------------------------------*/
 111:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** /* Private functions ---------------------------------------------------------*/
 112:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** 
 113:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** /** @defgroup HAL_Exported_Functions HAL Exported Functions
 114:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @{
 115:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   */
 116:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** 
 117:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** /** @defgroup HAL_Exported_Functions_Group1 Initialization and de-initialization Functions 
 118:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****  *  @brief    Initialization and de-initialization functions
 119:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****  *
 120:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** @verbatim    
 121:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****  ===============================================================================
 122:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****               ##### Initialization and de-initialization functions #####
 123:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****  ===============================================================================
 124:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****     [..]  This section provides functions allowing to:
 125:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****       (+) Initializes the Flash interface the NVIC allocation and initial clock 
 126:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****           configuration. It initializes the systick also when timeout is needed 
 127:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****           and the backup domain when enabled.
 128:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****       (+) de-Initializes common part of the HAL
 129:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****       (+) Configure The time base source to have 1ms time base with a dedicated 
 130:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****           Tick interrupt priority. 
 131:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****         (++) Systick timer is used by default as source of time base, but user 
 132:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****              can eventually implement his proper time base source (a general purpose 
 133:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****              timer for example or other time source), keeping in mind that Time base 
 134:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****              duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and 
 135:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****              handled in milliseconds basis.
 136:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****         (++) Time base configuration function (HAL_InitTick ()) is called automatically 
 137:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****              at the beginning of the program after reset by HAL_Init() or at any time 
 138:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****              when clock is configured, by HAL_RCC_ClockConfig(). 
 139:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****         (++) Source of time base is configured  to generate interrupts at regular 
 140:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****              time intervals. Care must be taken if HAL_Delay() is called from a 
 141:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****              peripheral ISR process, the Tick interrupt line must have higher priority 
 142:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****             (numerically lower) than the peripheral interrupt. Otherwise the caller 
 143:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****             ISR process will be blocked. 
 144:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****        (++) functions affecting time base configurations are declared as __weak  
 145:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****              to make  override possible  in case of other  implementations in user file.
 146:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** @endverbatim
ARM GAS  /var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//ccFeBzyd.s 			page 4


 147:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @{
 148:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   */
 149:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** 
 150:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** /**
 151:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @brief  This function is used to initialize the HAL Library; it must be the first 
 152:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   *         instruction to be executed in the main program (before to call any other
 153:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   *         HAL function), it performs the following:
 154:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   *           Configure the Flash prefetch, instruction and Data caches.
 155:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   *           Configures the SysTick to generate an interrupt each 1 millisecond,
 156:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   *           which is clocked by the HSI (at this stage, the clock is not yet
 157:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   *           configured and thus the system is running from the internal HSI at 16 MHz).
 158:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   *           Set NVIC Group Priority to 4.
 159:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   *           Calls the HAL_MspInit() callback function defined in user file 
 160:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   *           "stm32f4xx_hal_msp.c" to do the global low level hardware initialization 
 161:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   *            
 162:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @note   SysTick is used as time base for the HAL_Delay() function, the application
 163:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   *         need to ensure that the SysTick time base is always set to 1 millisecond
 164:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   *         to have correct HAL operation.
 165:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @retval HAL status
 166:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   */
 167:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** HAL_StatusTypeDef HAL_Init(void)
 168:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** {
 169:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   /* Configure Flash prefetch, Instruction cache, Data cache */ 
 170:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** #if (INSTRUCTION_CACHE_ENABLE != 0)
 171:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 172:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** #endif /* INSTRUCTION_CACHE_ENABLE */
 173:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** 
 174:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** #if (DATA_CACHE_ENABLE != 0)
 175:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****    __HAL_FLASH_DATA_CACHE_ENABLE();
 176:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** #endif /* DATA_CACHE_ENABLE */
 177:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** 
 178:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** #if (PREFETCH_ENABLE != 0)
 179:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 180:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** #endif /* PREFETCH_ENABLE */
 181:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** 
 182:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   /* Set Interrupt Group Priority */
 183:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 184:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** 
 185:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
 186:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   HAL_InitTick(TICK_INT_PRIORITY);
 187:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   
 188:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   /* Init the low level hardware */
 189:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   HAL_MspInit();
 190:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   
 191:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   /* Return function status */
 192:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   return HAL_OK;
 193:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** }
 194:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** 
 195:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** /**
 196:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @brief  This function de-Initializes common part of the HAL and stops the systick.
 197:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   *         This function is optional.   
 198:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @retval HAL status
 199:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   */
 200:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** HAL_StatusTypeDef HAL_DeInit(void)
 201:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** {
 202:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   /* Reset of all peripherals */
 203:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   __HAL_RCC_APB1_FORCE_RESET();
ARM GAS  /var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//ccFeBzyd.s 			page 5


 204:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   __HAL_RCC_APB1_RELEASE_RESET();
 205:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** 
 206:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   __HAL_RCC_APB2_FORCE_RESET();
 207:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   __HAL_RCC_APB2_RELEASE_RESET();
 208:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** 
 209:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   __HAL_RCC_AHB1_FORCE_RESET();
 210:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   __HAL_RCC_AHB1_RELEASE_RESET();
 211:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** 
 212:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   __HAL_RCC_AHB2_FORCE_RESET();
 213:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   __HAL_RCC_AHB2_RELEASE_RESET();
 214:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** 
 215:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   __HAL_RCC_AHB3_FORCE_RESET();
 216:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   __HAL_RCC_AHB3_RELEASE_RESET();
 217:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** 
 218:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   /* De-Init the low level hardware */
 219:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   HAL_MspDeInit();
 220:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****     
 221:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   /* Return function status */
 222:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   return HAL_OK;
 223:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** }
 224:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** 
 225:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** /**
 226:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @brief  Initializes the MSP.
 227:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @retval None
 228:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   */
 229:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** __weak void HAL_MspInit(void)
 230:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** {
  27              		.loc 1 230 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32 0000 7047     		bx	lr
  33              		.cfi_endproc
  34              	.LFE127:
  36              		.section	.text.HAL_MspDeInit,"ax",%progbits
  37              		.align	1
  38              		.weak	HAL_MspDeInit
  39              		.thumb
  40              		.thumb_func
  42              	HAL_MspDeInit:
  43              	.LFB128:
 231:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 232:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****             the HAL_MspInit could be implemented in the user file
 233:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****    */
 234:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** }
 235:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** 
 236:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** /**
 237:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @brief  DeInitializes the MSP.
 238:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @retval None
 239:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   */
 240:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** __weak void HAL_MspDeInit(void)
 241:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** {
  44              		.loc 1 241 0
  45              		.cfi_startproc
  46              		@ args = 0, pretend = 0, frame = 0
  47              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//ccFeBzyd.s 			page 6


  48              		@ link register save eliminated.
  49 0000 7047     		bx	lr
  50              		.cfi_endproc
  51              	.LFE128:
  53              		.section	.text.HAL_DeInit,"ax",%progbits
  54              		.align	1
  55              		.global	HAL_DeInit
  56              		.thumb
  57              		.thumb_func
  59              	HAL_DeInit:
  60              	.LFB126:
 201:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** {
  61              		.loc 1 201 0
  62              		.cfi_startproc
  63              		@ args = 0, pretend = 0, frame = 0
  64              		@ frame_needed = 0, uses_anonymous_args = 0
 201:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** {
  65              		.loc 1 201 0
  66 0000 10B5     		push	{r4, lr}
  67              	.LCFI0:
  68              		.cfi_def_cfa_offset 8
  69              		.cfi_offset 4, -8
  70              		.cfi_offset 14, -4
 203:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   __HAL_RCC_APB1_FORCE_RESET();
  71              		.loc 1 203 0
  72 0002 094B     		ldr	r3, .L4
  73 0004 4FF0FF32 		mov	r2, #-1
 204:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   __HAL_RCC_APB1_RELEASE_RESET();
  74              		.loc 1 204 0
  75 0008 0024     		movs	r4, #0
 203:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   __HAL_RCC_APB1_FORCE_RESET();
  76              		.loc 1 203 0
  77 000a 1A62     		str	r2, [r3, #32]
 204:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   __HAL_RCC_APB1_RELEASE_RESET();
  78              		.loc 1 204 0
  79 000c 1C62     		str	r4, [r3, #32]
 206:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   __HAL_RCC_APB2_FORCE_RESET();
  80              		.loc 1 206 0
  81 000e 5A62     		str	r2, [r3, #36]
 207:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   __HAL_RCC_APB2_RELEASE_RESET();
  82              		.loc 1 207 0
  83 0010 5C62     		str	r4, [r3, #36]
 209:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   __HAL_RCC_AHB1_FORCE_RESET();
  84              		.loc 1 209 0
  85 0012 1A61     		str	r2, [r3, #16]
 210:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   __HAL_RCC_AHB1_RELEASE_RESET();
  86              		.loc 1 210 0
  87 0014 1C61     		str	r4, [r3, #16]
 212:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   __HAL_RCC_AHB2_FORCE_RESET();
  88              		.loc 1 212 0
  89 0016 5A61     		str	r2, [r3, #20]
 213:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   __HAL_RCC_AHB2_RELEASE_RESET();
  90              		.loc 1 213 0
  91 0018 5C61     		str	r4, [r3, #20]
 215:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   __HAL_RCC_AHB3_FORCE_RESET();
  92              		.loc 1 215 0
  93 001a 9A61     		str	r2, [r3, #24]
ARM GAS  /var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//ccFeBzyd.s 			page 7


 216:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   __HAL_RCC_AHB3_RELEASE_RESET();
  94              		.loc 1 216 0
  95 001c 9C61     		str	r4, [r3, #24]
 219:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   HAL_MspDeInit();
  96              		.loc 1 219 0
  97 001e FFF7FEFF 		bl	HAL_MspDeInit
  98              	.LVL0:
 223:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** }
  99              		.loc 1 223 0
 100 0022 2046     		mov	r0, r4
 101 0024 10BD     		pop	{r4, pc}
 102              	.L5:
 103 0026 00BF     		.align	2
 104              	.L4:
 105 0028 00380240 		.word	1073887232
 106              		.cfi_endproc
 107              	.LFE126:
 109              		.section	.text.HAL_InitTick,"ax",%progbits
 110              		.align	1
 111              		.weak	HAL_InitTick
 112              		.thumb
 113              		.thumb_func
 115              	HAL_InitTick:
 116              	.LFB129:
 242:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 243:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****             the HAL_MspDeInit could be implemented in the user file
 244:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****    */ 
 245:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** }
 246:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** 
 247:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** /**
 248:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @brief This function configures the source of the time base.
 249:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   *        The time source is configured  to have 1ms time base with a dedicated 
 250:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   *        Tick interrupt priority.
 251:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @note This function is called  automatically at the beginning of program after
 252:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   *       reset by HAL_Init() or at any time when clock is reconfigured  by HAL_RCC_ClockConfig().
 253:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @note In the default implementation, SysTick timer is the source of time base. 
 254:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   *       It is used to generate interrupts at regular time intervals. 
 255:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   *       Care must be taken if HAL_Delay() is called from a peripheral ISR process, 
 256:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   *       The the SysTick interrupt must have higher priority (numerically lower) 
 257:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   *       than the peripheral interrupt. Otherwise the caller ISR process will be blocked.
 258:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   *       The function is declared as __weak  to be overwritten  in case of other
 259:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   *       implementation  in user file.
 260:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @param TickPriority: Tick interrupt priority.
 261:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @retval HAL status
 262:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   */
 263:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** __weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
 264:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** {
 117              		.loc 1 264 0
 118              		.cfi_startproc
 119              		@ args = 0, pretend = 0, frame = 0
 120              		@ frame_needed = 0, uses_anonymous_args = 0
 121              	.LVL1:
 122 0000 10B5     		push	{r4, lr}
 123              	.LCFI1:
 124              		.cfi_def_cfa_offset 8
 125              		.cfi_offset 4, -8
 126              		.cfi_offset 14, -4
ARM GAS  /var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//ccFeBzyd.s 			page 8


 127              		.loc 1 264 0
 128 0002 0446     		mov	r4, r0
 265:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   /*Configure the SysTick to have interrupt in 1ms time basis*/
 266:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 129              		.loc 1 266 0
 130 0004 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 131              	.LVL2:
 132 0008 4FF47A73 		mov	r3, #1000
 133 000c B0FBF3F0 		udiv	r0, r0, r3
 134 0010 FFF7FEFF 		bl	HAL_SYSTICK_Config
 135              	.LVL3:
 267:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** 
 268:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   /*Configure the SysTick IRQ priority */
 269:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 136              		.loc 1 269 0
 137 0014 4FF0FF30 		mov	r0, #-1
 138 0018 2146     		mov	r1, r4
 139 001a 0022     		movs	r2, #0
 140 001c FFF7FEFF 		bl	HAL_NVIC_SetPriority
 141              	.LVL4:
 270:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** 
 271:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   /* Return function status */
 272:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   return HAL_OK;
 273:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** }
 142              		.loc 1 273 0
 143 0020 0020     		movs	r0, #0
 144 0022 10BD     		pop	{r4, pc}
 145              		.cfi_endproc
 146              	.LFE129:
 148              		.section	.text.HAL_Init,"ax",%progbits
 149              		.align	1
 150              		.global	HAL_Init
 151              		.thumb
 152              		.thumb_func
 154              	HAL_Init:
 155              	.LFB125:
 168:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** {
 156              		.loc 1 168 0
 157              		.cfi_startproc
 158              		@ args = 0, pretend = 0, frame = 0
 159              		@ frame_needed = 0, uses_anonymous_args = 0
 160 0000 08B5     		push	{r3, lr}
 161              	.LCFI2:
 162              		.cfi_def_cfa_offset 8
 163              		.cfi_offset 3, -8
 164              		.cfi_offset 14, -4
 171:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 165              		.loc 1 171 0
 166 0002 0B4B     		ldr	r3, .L8
 167 0004 1A68     		ldr	r2, [r3]
 168 0006 42F40072 		orr	r2, r2, #512
 169 000a 1A60     		str	r2, [r3]
 175:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****    __HAL_FLASH_DATA_CACHE_ENABLE();
 170              		.loc 1 175 0
 171 000c 1A68     		ldr	r2, [r3]
 172 000e 42F48062 		orr	r2, r2, #1024
 173 0012 1A60     		str	r2, [r3]
ARM GAS  /var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//ccFeBzyd.s 			page 9


 179:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 174              		.loc 1 179 0
 175 0014 1A68     		ldr	r2, [r3]
 176 0016 42F48072 		orr	r2, r2, #256
 177 001a 1A60     		str	r2, [r3]
 183:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 178              		.loc 1 183 0
 179 001c 0320     		movs	r0, #3
 180 001e FFF7FEFF 		bl	HAL_NVIC_SetPriorityGrouping
 181              	.LVL5:
 186:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   HAL_InitTick(TICK_INT_PRIORITY);
 182              		.loc 1 186 0
 183 0022 0020     		movs	r0, #0
 184 0024 FFF7FEFF 		bl	HAL_InitTick
 185              	.LVL6:
 189:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   HAL_MspInit();
 186              		.loc 1 189 0
 187 0028 FFF7FEFF 		bl	HAL_MspInit
 188              	.LVL7:
 193:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** }
 189              		.loc 1 193 0
 190 002c 0020     		movs	r0, #0
 191 002e 08BD     		pop	{r3, pc}
 192              	.L9:
 193              		.align	2
 194              	.L8:
 195 0030 003C0240 		.word	1073888256
 196              		.cfi_endproc
 197              	.LFE125:
 199              		.section	.text.HAL_IncTick,"ax",%progbits
 200              		.align	1
 201              		.weak	HAL_IncTick
 202              		.thumb
 203              		.thumb_func
 205              	HAL_IncTick:
 206              	.LFB130:
 274:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** 
 275:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** /**
 276:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @}
 277:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   */
 278:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** 
 279:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** /** @defgroup HAL_Exported_Functions_Group2 HAL Control functions 
 280:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****  *  @brief    HAL Control functions
 281:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****  *
 282:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** @verbatim
 283:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****  ===============================================================================
 284:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****                       ##### HAL Control functions #####
 285:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****  ===============================================================================
 286:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****     [..]  This section provides functions allowing to:
 287:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****       (+) Provide a tick value in millisecond
 288:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****       (+) Provide a blocking delay in millisecond
 289:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****       (+) Suspend the time base source interrupt
 290:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****       (+) Resume the time base source interrupt
 291:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****       (+) Get the HAL API driver version
 292:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****       (+) Get the device identifier
 293:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****       (+) Get the device revision identifier
 294:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****       (+) Enable/Disable Debug module during SLEEP mode
ARM GAS  /var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//ccFeBzyd.s 			page 10


 295:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****       (+) Enable/Disable Debug module during STOP mode
 296:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****       (+) Enable/Disable Debug module during STANDBY mode
 297:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** 
 298:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** @endverbatim
 299:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @{
 300:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   */
 301:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** 
 302:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** /**
 303:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @brief This function is called to increment  a global variable "uwTick"
 304:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   *        used as application time base.
 305:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @note In the default implementation, this variable is incremented each 1ms
 306:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   *       in Systick ISR.
 307:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****  * @note This function is declared as __weak to be overwritten in case of other 
 308:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   *      implementations in user file.
 309:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @retval None
 310:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   */
 311:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** __weak void HAL_IncTick(void)
 312:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** {
 207              		.loc 1 312 0
 208              		.cfi_startproc
 209              		@ args = 0, pretend = 0, frame = 0
 210              		@ frame_needed = 0, uses_anonymous_args = 0
 211              		@ link register save eliminated.
 313:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   uwTick++;
 212              		.loc 1 313 0
 213 0000 024B     		ldr	r3, .L11
 214 0002 1A68     		ldr	r2, [r3]
 215 0004 0132     		adds	r2, r2, #1
 216 0006 1A60     		str	r2, [r3]
 217 0008 7047     		bx	lr
 218              	.L12:
 219 000a 00BF     		.align	2
 220              	.L11:
 221 000c 00000000 		.word	.LANCHOR0
 222              		.cfi_endproc
 223              	.LFE130:
 225              		.section	.text.HAL_GetTick,"ax",%progbits
 226              		.align	1
 227              		.weak	HAL_GetTick
 228              		.thumb
 229              		.thumb_func
 231              	HAL_GetTick:
 232              	.LFB131:
 314:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** }
 315:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** 
 316:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** /**
 317:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @brief Provides a tick value in millisecond.
 318:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @note This function is declared as __weak to be overwritten in case of other 
 319:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   *       implementations in user file.
 320:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @retval tick value
 321:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   */
 322:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** __weak uint32_t HAL_GetTick(void)
 323:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** {
 233              		.loc 1 323 0
 234              		.cfi_startproc
 235              		@ args = 0, pretend = 0, frame = 0
 236              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//ccFeBzyd.s 			page 11


 237              		@ link register save eliminated.
 324:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   return uwTick;
 238              		.loc 1 324 0
 239 0000 014B     		ldr	r3, .L14
 240 0002 1868     		ldr	r0, [r3]
 325:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** }
 241              		.loc 1 325 0
 242 0004 7047     		bx	lr
 243              	.L15:
 244 0006 00BF     		.align	2
 245              	.L14:
 246 0008 00000000 		.word	.LANCHOR0
 247              		.cfi_endproc
 248              	.LFE131:
 250              		.section	.text.HAL_Delay,"ax",%progbits
 251              		.align	1
 252              		.weak	HAL_Delay
 253              		.thumb
 254              		.thumb_func
 256              	HAL_Delay:
 257              	.LFB132:
 326:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** 
 327:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** /**
 328:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @brief This function provides accurate delay (in milliseconds) based 
 329:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   *        on variable incremented.
 330:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @note In the default implementation , SysTick timer is the source of time base.
 331:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   *       It is used to generate interrupts at regular time intervals where uwTick
 332:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   *       is incremented.
 333:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @note This function is declared as __weak to be overwritten in case of other
 334:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   *       implementations in user file.
 335:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @param Delay: specifies the delay time length, in milliseconds.
 336:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @retval None
 337:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   */
 338:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** __weak void HAL_Delay(__IO uint32_t Delay)
 339:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** {
 258              		.loc 1 339 0
 259              		.cfi_startproc
 260              		@ args = 0, pretend = 0, frame = 8
 261              		@ frame_needed = 0, uses_anonymous_args = 0
 262              	.LVL8:
 263 0000 13B5     		push	{r0, r1, r4, lr}
 264              	.LCFI3:
 265              		.cfi_def_cfa_offset 16
 266              		.cfi_offset 0, -16
 267              		.cfi_offset 1, -12
 268              		.cfi_offset 4, -8
 269              		.cfi_offset 14, -4
 270              		.loc 1 339 0
 271 0002 0190     		str	r0, [sp, #4]
 340:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   uint32_t tickstart = 0;
 341:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   tickstart = HAL_GetTick();
 272              		.loc 1 341 0
 273 0004 FFF7FEFF 		bl	HAL_GetTick
 274              	.LVL9:
 275 0008 0446     		mov	r4, r0
 276              	.LVL10:
 277              	.L18:
ARM GAS  /var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//ccFeBzyd.s 			page 12


 342:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   while((HAL_GetTick() - tickstart) < Delay)
 278              		.loc 1 342 0 discriminator 1
 279 000a FFF7FEFF 		bl	HAL_GetTick
 280              	.LVL11:
 281 000e 019B     		ldr	r3, [sp, #4]
 282 0010 001B     		subs	r0, r0, r4
 283 0012 9842     		cmp	r0, r3
 284 0014 F9D3     		bcc	.L18
 343:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   {
 344:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   }
 345:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** }
 285              		.loc 1 345 0
 286 0016 02B0     		add	sp, sp, #8
 287              	.LVL12:
 288              		@ sp needed
 289 0018 10BD     		pop	{r4, pc}
 290              		.cfi_endproc
 291              	.LFE132:
 293              		.section	.text.HAL_SuspendTick,"ax",%progbits
 294              		.align	1
 295              		.weak	HAL_SuspendTick
 296              		.thumb
 297              		.thumb_func
 299              	HAL_SuspendTick:
 300              	.LFB133:
 346:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** 
 347:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** /**
 348:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @brief Suspend Tick increment.
 349:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @note In the default implementation , SysTick timer is the source of time base. It is
 350:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   *       used to generate interrupts at regular time intervals. Once HAL_SuspendTick()
 351:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   *       is called, the SysTick interrupt will be disabled and so Tick increment 
 352:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   *       is suspended.
 353:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @note This function is declared as __weak to be overwritten in case of other
 354:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   *       implementations in user file.
 355:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @retval None
 356:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   */
 357:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** __weak void HAL_SuspendTick(void)
 358:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** {
 301              		.loc 1 358 0
 302              		.cfi_startproc
 303              		@ args = 0, pretend = 0, frame = 0
 304              		@ frame_needed = 0, uses_anonymous_args = 0
 305              		@ link register save eliminated.
 359:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   /* Disable SysTick Interrupt */
 360:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 306              		.loc 1 360 0
 307 0000 024B     		ldr	r3, .L21
 308 0002 1A68     		ldr	r2, [r3]
 309 0004 22F00202 		bic	r2, r2, #2
 310 0008 1A60     		str	r2, [r3]
 311 000a 7047     		bx	lr
 312              	.L22:
 313              		.align	2
 314              	.L21:
 315 000c 10E000E0 		.word	-536813552
 316              		.cfi_endproc
 317              	.LFE133:
ARM GAS  /var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//ccFeBzyd.s 			page 13


 319              		.section	.text.HAL_ResumeTick,"ax",%progbits
 320              		.align	1
 321              		.weak	HAL_ResumeTick
 322              		.thumb
 323              		.thumb_func
 325              	HAL_ResumeTick:
 326              	.LFB134:
 361:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** }
 362:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** 
 363:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** /**
 364:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @brief Resume Tick increment.
 365:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @note In the default implementation , SysTick timer is the source of time base. It is
 366:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   *       used to generate interrupts at regular time intervals. Once HAL_ResumeTick()
 367:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   *       is called, the SysTick interrupt will be enabled and so Tick increment 
 368:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   *       is resumed.
 369:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @note This function is declared as __weak to be overwritten in case of other
 370:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   *       implementations in user file.
 371:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @retval None
 372:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   */
 373:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** __weak void HAL_ResumeTick(void)
 374:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** {
 327              		.loc 1 374 0
 328              		.cfi_startproc
 329              		@ args = 0, pretend = 0, frame = 0
 330              		@ frame_needed = 0, uses_anonymous_args = 0
 331              		@ link register save eliminated.
 375:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   /* Enable SysTick Interrupt */
 376:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 332              		.loc 1 376 0
 333 0000 024B     		ldr	r3, .L24
 334 0002 1A68     		ldr	r2, [r3]
 335 0004 42F00202 		orr	r2, r2, #2
 336 0008 1A60     		str	r2, [r3]
 337 000a 7047     		bx	lr
 338              	.L25:
 339              		.align	2
 340              	.L24:
 341 000c 10E000E0 		.word	-536813552
 342              		.cfi_endproc
 343              	.LFE134:
 345              		.section	.text.HAL_GetHalVersion,"ax",%progbits
 346              		.align	1
 347              		.global	HAL_GetHalVersion
 348              		.thumb
 349              		.thumb_func
 351              	HAL_GetHalVersion:
 352              	.LFB135:
 377:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** }
 378:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** 
 379:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** /**
 380:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @brief  Returns the HAL revision
 381:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @retval version : 0xXYZR (8bits for each decimal, R for RC)
 382:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   */
 383:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** uint32_t HAL_GetHalVersion(void)
 384:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** {
 353              		.loc 1 384 0
 354              		.cfi_startproc
ARM GAS  /var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//ccFeBzyd.s 			page 14


 355              		@ args = 0, pretend = 0, frame = 0
 356              		@ frame_needed = 0, uses_anonymous_args = 0
 357              		@ link register save eliminated.
 385:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****  return __STM32F4xx_HAL_VERSION;
 386:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** }
 358              		.loc 1 386 0
 359 0000 0048     		ldr	r0, .L27
 360 0002 7047     		bx	lr
 361              	.L28:
 362              		.align	2
 363              	.L27:
 364 0004 00030401 		.word	17040128
 365              		.cfi_endproc
 366              	.LFE135:
 368              		.section	.text.HAL_GetREVID,"ax",%progbits
 369              		.align	1
 370              		.global	HAL_GetREVID
 371              		.thumb
 372              		.thumb_func
 374              	HAL_GetREVID:
 375              	.LFB136:
 387:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** 
 388:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** /**
 389:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @brief  Returns the device revision identifier.
 390:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @retval Device revision identifier
 391:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   */
 392:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** uint32_t HAL_GetREVID(void)
 393:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** {
 376              		.loc 1 393 0
 377              		.cfi_startproc
 378              		@ args = 0, pretend = 0, frame = 0
 379              		@ frame_needed = 0, uses_anonymous_args = 0
 380              		@ link register save eliminated.
 394:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****    return((DBGMCU->IDCODE) >> 16);
 381              		.loc 1 394 0
 382 0000 014B     		ldr	r3, .L30
 383 0002 1868     		ldr	r0, [r3]
 395:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** }
 384              		.loc 1 395 0
 385 0004 000C     		lsrs	r0, r0, #16
 386 0006 7047     		bx	lr
 387              	.L31:
 388              		.align	2
 389              	.L30:
 390 0008 002004E0 		.word	-536600576
 391              		.cfi_endproc
 392              	.LFE136:
 394              		.section	.text.HAL_GetDEVID,"ax",%progbits
 395              		.align	1
 396              		.global	HAL_GetDEVID
 397              		.thumb
 398              		.thumb_func
 400              	HAL_GetDEVID:
 401              	.LFB137:
 396:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** 
 397:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** /**
 398:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @brief  Returns the device identifier.
ARM GAS  /var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//ccFeBzyd.s 			page 15


 399:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @retval Device identifier
 400:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   */
 401:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** uint32_t HAL_GetDEVID(void)
 402:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** {
 402              		.loc 1 402 0
 403              		.cfi_startproc
 404              		@ args = 0, pretend = 0, frame = 0
 405              		@ frame_needed = 0, uses_anonymous_args = 0
 406              		@ link register save eliminated.
 403:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****    return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 407              		.loc 1 403 0
 408 0000 024B     		ldr	r3, .L33
 409 0002 1868     		ldr	r0, [r3]
 404:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** }
 410              		.loc 1 404 0
 411 0004 C0F30B00 		ubfx	r0, r0, #0, #12
 412 0008 7047     		bx	lr
 413              	.L34:
 414 000a 00BF     		.align	2
 415              	.L33:
 416 000c 002004E0 		.word	-536600576
 417              		.cfi_endproc
 418              	.LFE137:
 420              		.section	.text.HAL_DBGMCU_EnableDBGSleepMode,"ax",%progbits
 421              		.align	1
 422              		.global	HAL_DBGMCU_EnableDBGSleepMode
 423              		.thumb
 424              		.thumb_func
 426              	HAL_DBGMCU_EnableDBGSleepMode:
 427              	.LFB138:
 405:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** 
 406:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** /**
 407:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @brief  Enable the Debug Module during SLEEP mode
 408:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @retval None
 409:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   */
 410:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** void HAL_DBGMCU_EnableDBGSleepMode(void)
 411:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** {
 428              		.loc 1 411 0
 429              		.cfi_startproc
 430              		@ args = 0, pretend = 0, frame = 0
 431              		@ frame_needed = 0, uses_anonymous_args = 0
 432              		@ link register save eliminated.
 412:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 433              		.loc 1 412 0
 434 0000 024B     		ldr	r3, .L36
 435 0002 5A68     		ldr	r2, [r3, #4]
 436 0004 42F00102 		orr	r2, r2, #1
 437 0008 5A60     		str	r2, [r3, #4]
 438 000a 7047     		bx	lr
 439              	.L37:
 440              		.align	2
 441              	.L36:
 442 000c 002004E0 		.word	-536600576
 443              		.cfi_endproc
 444              	.LFE138:
 446              		.section	.text.HAL_DBGMCU_DisableDBGSleepMode,"ax",%progbits
 447              		.align	1
ARM GAS  /var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//ccFeBzyd.s 			page 16


 448              		.global	HAL_DBGMCU_DisableDBGSleepMode
 449              		.thumb
 450              		.thumb_func
 452              	HAL_DBGMCU_DisableDBGSleepMode:
 453              	.LFB139:
 413:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** }
 414:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** 
 415:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** /**
 416:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @brief  Disable the Debug Module during SLEEP mode
 417:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @retval None
 418:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   */
 419:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** void HAL_DBGMCU_DisableDBGSleepMode(void)
 420:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** {
 454              		.loc 1 420 0
 455              		.cfi_startproc
 456              		@ args = 0, pretend = 0, frame = 0
 457              		@ frame_needed = 0, uses_anonymous_args = 0
 458              		@ link register save eliminated.
 421:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 459              		.loc 1 421 0
 460 0000 024B     		ldr	r3, .L39
 461 0002 5A68     		ldr	r2, [r3, #4]
 462 0004 22F00102 		bic	r2, r2, #1
 463 0008 5A60     		str	r2, [r3, #4]
 464 000a 7047     		bx	lr
 465              	.L40:
 466              		.align	2
 467              	.L39:
 468 000c 002004E0 		.word	-536600576
 469              		.cfi_endproc
 470              	.LFE139:
 472              		.section	.text.HAL_DBGMCU_EnableDBGStopMode,"ax",%progbits
 473              		.align	1
 474              		.global	HAL_DBGMCU_EnableDBGStopMode
 475              		.thumb
 476              		.thumb_func
 478              	HAL_DBGMCU_EnableDBGStopMode:
 479              	.LFB140:
 422:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** }
 423:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** 
 424:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** /**
 425:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @brief  Enable the Debug Module during STOP mode
 426:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @retval None
 427:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   */
 428:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** void HAL_DBGMCU_EnableDBGStopMode(void)
 429:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** {
 480              		.loc 1 429 0
 481              		.cfi_startproc
 482              		@ args = 0, pretend = 0, frame = 0
 483              		@ frame_needed = 0, uses_anonymous_args = 0
 484              		@ link register save eliminated.
 430:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 485              		.loc 1 430 0
 486 0000 024B     		ldr	r3, .L42
 487 0002 5A68     		ldr	r2, [r3, #4]
 488 0004 42F00202 		orr	r2, r2, #2
 489 0008 5A60     		str	r2, [r3, #4]
ARM GAS  /var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//ccFeBzyd.s 			page 17


 490 000a 7047     		bx	lr
 491              	.L43:
 492              		.align	2
 493              	.L42:
 494 000c 002004E0 		.word	-536600576
 495              		.cfi_endproc
 496              	.LFE140:
 498              		.section	.text.HAL_DBGMCU_DisableDBGStopMode,"ax",%progbits
 499              		.align	1
 500              		.global	HAL_DBGMCU_DisableDBGStopMode
 501              		.thumb
 502              		.thumb_func
 504              	HAL_DBGMCU_DisableDBGStopMode:
 505              	.LFB141:
 431:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** }
 432:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** 
 433:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** /**
 434:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @brief  Disable the Debug Module during STOP mode
 435:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @retval None
 436:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   */
 437:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** void HAL_DBGMCU_DisableDBGStopMode(void)
 438:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** {
 506              		.loc 1 438 0
 507              		.cfi_startproc
 508              		@ args = 0, pretend = 0, frame = 0
 509              		@ frame_needed = 0, uses_anonymous_args = 0
 510              		@ link register save eliminated.
 439:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 511              		.loc 1 439 0
 512 0000 024B     		ldr	r3, .L45
 513 0002 5A68     		ldr	r2, [r3, #4]
 514 0004 22F00202 		bic	r2, r2, #2
 515 0008 5A60     		str	r2, [r3, #4]
 516 000a 7047     		bx	lr
 517              	.L46:
 518              		.align	2
 519              	.L45:
 520 000c 002004E0 		.word	-536600576
 521              		.cfi_endproc
 522              	.LFE141:
 524              		.section	.text.HAL_DBGMCU_EnableDBGStandbyMode,"ax",%progbits
 525              		.align	1
 526              		.global	HAL_DBGMCU_EnableDBGStandbyMode
 527              		.thumb
 528              		.thumb_func
 530              	HAL_DBGMCU_EnableDBGStandbyMode:
 531              	.LFB142:
 440:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** }
 441:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** 
 442:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** /**
 443:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @brief  Enable the Debug Module during STANDBY mode
 444:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @retval None
 445:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   */
 446:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** void HAL_DBGMCU_EnableDBGStandbyMode(void)
 447:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** {
 532              		.loc 1 447 0
 533              		.cfi_startproc
ARM GAS  /var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//ccFeBzyd.s 			page 18


 534              		@ args = 0, pretend = 0, frame = 0
 535              		@ frame_needed = 0, uses_anonymous_args = 0
 536              		@ link register save eliminated.
 448:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 537              		.loc 1 448 0
 538 0000 024B     		ldr	r3, .L48
 539 0002 5A68     		ldr	r2, [r3, #4]
 540 0004 42F00402 		orr	r2, r2, #4
 541 0008 5A60     		str	r2, [r3, #4]
 542 000a 7047     		bx	lr
 543              	.L49:
 544              		.align	2
 545              	.L48:
 546 000c 002004E0 		.word	-536600576
 547              		.cfi_endproc
 548              	.LFE142:
 550              		.section	.text.HAL_DBGMCU_DisableDBGStandbyMode,"ax",%progbits
 551              		.align	1
 552              		.global	HAL_DBGMCU_DisableDBGStandbyMode
 553              		.thumb
 554              		.thumb_func
 556              	HAL_DBGMCU_DisableDBGStandbyMode:
 557              	.LFB143:
 449:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** }
 450:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** 
 451:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** /**
 452:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @brief  Disable the Debug Module during STANDBY mode
 453:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @retval None
 454:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   */
 455:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** void HAL_DBGMCU_DisableDBGStandbyMode(void)
 456:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** {
 558              		.loc 1 456 0
 559              		.cfi_startproc
 560              		@ args = 0, pretend = 0, frame = 0
 561              		@ frame_needed = 0, uses_anonymous_args = 0
 562              		@ link register save eliminated.
 457:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 563              		.loc 1 457 0
 564 0000 024B     		ldr	r3, .L51
 565 0002 5A68     		ldr	r2, [r3, #4]
 566 0004 22F00402 		bic	r2, r2, #4
 567 0008 5A60     		str	r2, [r3, #4]
 568 000a 7047     		bx	lr
 569              	.L52:
 570              		.align	2
 571              	.L51:
 572 000c 002004E0 		.word	-536600576
 573              		.cfi_endproc
 574              	.LFE143:
 576              		.section	.text.HAL_EnableCompensationCell,"ax",%progbits
 577              		.align	1
 578              		.global	HAL_EnableCompensationCell
 579              		.thumb
 580              		.thumb_func
 582              	HAL_EnableCompensationCell:
 583              	.LFB144:
 458:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** }
ARM GAS  /var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//ccFeBzyd.s 			page 19


 459:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** 
 460:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** /**
 461:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @brief  Enables the I/O Compensation Cell.
 462:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @note   The I/O compensation cell can be used only when the device supply
 463:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   *         voltage ranges from 2.4 to 3.6 V.  
 464:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @retval None
 465:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   */
 466:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** void HAL_EnableCompensationCell(void)
 467:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** {
 584              		.loc 1 467 0
 585              		.cfi_startproc
 586              		@ args = 0, pretend = 0, frame = 0
 587              		@ frame_needed = 0, uses_anonymous_args = 0
 588              		@ link register save eliminated.
 589              	.LVL13:
 590              	.LBB6:
 591              	.LBB7:
 592              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V4.30
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     20. October 2015
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:Drivers/CMSIS/Include/cmsis_gcc.h **** 
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****    All rights reserved.
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****      specific prior written permission.
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****    *
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:Drivers/CMSIS/Include/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:Drivers/CMSIS/Include/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:Drivers/CMSIS/Include/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:Drivers/CMSIS/Include/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:Drivers/CMSIS/Include/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:Drivers/CMSIS/Include/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:Drivers/CMSIS/Include/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:Drivers/CMSIS/Include/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:Drivers/CMSIS/Include/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  36:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined ( __GNUC__ )
ARM GAS  /var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//ccFeBzyd.s 			page 20


  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  41:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  44:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  47:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  49:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
  51:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  53:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  54:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  55:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  57:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  59:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  60:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  62:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  66:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  67:Drivers/CMSIS/Include/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  72:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  73:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  74:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  75:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
  77:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  78:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  80:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  81:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
  83:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  85:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  87:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  88:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  89:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  93:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  95:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
ARM GAS  /var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//ccFeBzyd.s 			page 21


  97:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  98:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  99:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 100:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 101:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 102:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 105:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 106:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 108:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 109:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 110:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 111:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 114:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 115:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 116:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 118:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 123:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 124:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 125:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 126:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 127:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 128:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 129:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 132:Drivers/CMSIS/Include/cmsis_gcc.h ****     \return               xPSR Register value
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 137:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 142:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 143:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 145:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 148:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 149:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 150:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 151:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
ARM GAS  /var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//ccFeBzyd.s 			page 22


 154:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 155:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 163:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 164:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 169:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 170:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 171:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 172:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 175:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 178:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 183:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 184:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 186:Drivers/CMSIS/Include/cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 187:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 190:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 196:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 197:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 198:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 200:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 201:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 204:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 207:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 210:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
ARM GAS  /var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//ccFeBzyd.s 			page 23


 211:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 213:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 215:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 222:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 223:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 224:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 226:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)
 227:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 228:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 231:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 232:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 234:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 235:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 236:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
 238:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 240:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 241:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 244:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 245:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 248:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 250:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 254:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 255:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 256:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 257:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 258:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 259:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 261:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 264:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 265:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 266:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 267:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//ccFeBzyd.s 			page 24


 268:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 269:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 270:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 272:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 273:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t value)
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (value) : "memory");
 277:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 278:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 279:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 281:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 283:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 284:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 288:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 291:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 296:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 298:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 299:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 300:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 301:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M >= 0x03U) */
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 306:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 307:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U)
 308:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 311:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 312:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FPSCR(void)
 315:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 316:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 317:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 320:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 324:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
ARM GAS  /var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//ccFeBzyd.s 			page 25


 325:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(0);
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 329:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 332:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 338:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 339:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc");
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 342:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 343:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 344:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 345:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U) */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 348:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 349:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 350:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 351:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 352:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 353:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 354:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 355:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 358:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 361:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 362:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 363:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 368:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 369:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("nop");
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 378:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 379:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 381:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
ARM GAS  /var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//ccFeBzyd.s 			page 26


 382:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 384:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfi");
 386:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 387:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 388:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 389:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 392:Drivers/CMSIS/Include/cmsis_gcc.h ****     a low-power state until one of a number of events occurs.
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 396:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfe");
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 398:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 399:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 400:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 403:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 405:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("sev");
 407:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 408:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 409:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 410:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 416:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 417:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 426:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 427:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 428:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 430:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 431:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 433:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 435:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 436:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
ARM GAS  /var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//ccFeBzyd.s 			page 27


 439:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 440:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 441:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 442:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 444:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 445:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 446:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in integer value.
 447:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 448:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 450:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV(uint32_t value)
 451:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 452:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 455:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 456:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 457:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 458:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 459:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 460:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 461:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 462:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 463:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 464:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 465:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in two unsigned short values.
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 467:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 468:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV16(uint32_t value)
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 471:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 472:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 475:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 478:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 479:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order in signed short value
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a signed short value with sign extension to integer.
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 482:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 483:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE int32_t __REVSH(int32_t value)
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 486:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (short)__builtin_bswap16(value);
 488:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t result;
 490:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 491:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 492:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 493:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 495:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//ccFeBzyd.s 			page 28


 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 498:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 499:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 500:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 501:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Number of Bits to rotate
 502:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 504:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 505:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 506:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 507:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 508:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 509:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 511:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 513:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 516:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 520:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 521:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 522:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 526:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 528:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 529:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 593              		.loc 2 531 0
 594 0000 0122     		movs	r2, #1
 595              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 596 0002 92FAA2F2 		rbit r2, r2
 597              	@ 0 "" 2
 598              	.LVL14:
 599              		.thumb
 600              	.LBE7:
 601              	.LBE6:
 468:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   *(__IO uint32_t *)CMPCR_CMP_PD_BB = (uint32_t)ENABLE;
 602              		.loc 1 468 0
 603 0006 034B     		ldr	r3, .L54
 604 0008 B2FA82F2 		clz	r2, r2
 605              	.LVL15:
 606 000c 0121     		movs	r1, #1
 607 000e 43F82210 		str	r1, [r3, r2, lsl #2]
 608 0012 7047     		bx	lr
 609              	.L55:
 610              		.align	2
 611              	.L54:
 612 0014 00042742 		.word	1109853184
ARM GAS  /var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//ccFeBzyd.s 			page 29


 613              		.cfi_endproc
 614              	.LFE144:
 616              		.section	.text.HAL_DisableCompensationCell,"ax",%progbits
 617              		.align	1
 618              		.global	HAL_DisableCompensationCell
 619              		.thumb
 620              		.thumb_func
 622              	HAL_DisableCompensationCell:
 623              	.LFB145:
 469:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** }
 470:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** 
 471:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** /**
 472:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @brief  Power-down the I/O Compensation Cell.
 473:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @note   The I/O compensation cell can be used only when the device supply
 474:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   *         voltage ranges from 2.4 to 3.6 V.  
 475:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @retval None
 476:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   */
 477:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** void HAL_DisableCompensationCell(void)
 478:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** {
 624              		.loc 1 478 0
 625              		.cfi_startproc
 626              		@ args = 0, pretend = 0, frame = 0
 627              		@ frame_needed = 0, uses_anonymous_args = 0
 628              		@ link register save eliminated.
 629              	.LVL16:
 630              	.LBB8:
 631              	.LBB9:
 632              		.loc 2 531 0
 633 0000 0122     		movs	r2, #1
 634              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 635 0002 92FAA2F2 		rbit r2, r2
 636              	@ 0 "" 2
 637              	.LVL17:
 638              		.thumb
 639              	.LBE9:
 640              	.LBE8:
 479:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   *(__IO uint32_t *)CMPCR_CMP_PD_BB = (uint32_t)DISABLE;
 641              		.loc 1 479 0
 642 0006 034B     		ldr	r3, .L57
 643 0008 B2FA82F2 		clz	r2, r2
 644              	.LVL18:
 645 000c 0021     		movs	r1, #0
 646 000e 43F82210 		str	r1, [r3, r2, lsl #2]
 647 0012 7047     		bx	lr
 648              	.L58:
 649              		.align	2
 650              	.L57:
 651 0014 00042742 		.word	1109853184
 652              		.cfi_endproc
 653              	.LFE145:
 655              		.section	.bss.uwTick,"aw",%nobits
 656              		.align	2
 657              		.set	.LANCHOR0,. + 0
 660              	uwTick:
 661 0000 00000000 		.space	4
 662              		.text
 663              	.Letext0:
ARM GAS  /var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//ccFeBzyd.s 			page 30


 664              		.file 3 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f401xe.h"
 665              		.file 4 "/Users/Arethusa/Library/Arduino15/packages/arduino/tools/arm-none-eabi-gcc/4.8.3-2014q1/a
 666              		.file 5 "/Users/Arethusa/Library/Arduino15/packages/arduino/tools/arm-none-eabi-gcc/4.8.3-2014q1/a
 667              		.file 6 "Drivers/CMSIS/Include/core_cm4.h"
 668              		.file 7 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 669              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 670              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 671              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
ARM GAS  /var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//ccFeBzyd.s 			page 31


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_hal.c
/var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//ccFeBzyd.s:19     .text.HAL_MspInit:0000000000000000 $t
/var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//ccFeBzyd.s:24     .text.HAL_MspInit:0000000000000000 HAL_MspInit
/var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//ccFeBzyd.s:37     .text.HAL_MspDeInit:0000000000000000 $t
/var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//ccFeBzyd.s:42     .text.HAL_MspDeInit:0000000000000000 HAL_MspDeInit
/var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//ccFeBzyd.s:54     .text.HAL_DeInit:0000000000000000 $t
/var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//ccFeBzyd.s:59     .text.HAL_DeInit:0000000000000000 HAL_DeInit
/var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//ccFeBzyd.s:105    .text.HAL_DeInit:0000000000000028 $d
/var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//ccFeBzyd.s:110    .text.HAL_InitTick:0000000000000000 $t
/var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//ccFeBzyd.s:115    .text.HAL_InitTick:0000000000000000 HAL_InitTick
/var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//ccFeBzyd.s:149    .text.HAL_Init:0000000000000000 $t
/var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//ccFeBzyd.s:154    .text.HAL_Init:0000000000000000 HAL_Init
/var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//ccFeBzyd.s:195    .text.HAL_Init:0000000000000030 $d
/var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//ccFeBzyd.s:200    .text.HAL_IncTick:0000000000000000 $t
/var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//ccFeBzyd.s:205    .text.HAL_IncTick:0000000000000000 HAL_IncTick
/var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//ccFeBzyd.s:221    .text.HAL_IncTick:000000000000000c $d
/var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//ccFeBzyd.s:226    .text.HAL_GetTick:0000000000000000 $t
/var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//ccFeBzyd.s:231    .text.HAL_GetTick:0000000000000000 HAL_GetTick
/var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//ccFeBzyd.s:246    .text.HAL_GetTick:0000000000000008 $d
/var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//ccFeBzyd.s:251    .text.HAL_Delay:0000000000000000 $t
/var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//ccFeBzyd.s:256    .text.HAL_Delay:0000000000000000 HAL_Delay
/var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//ccFeBzyd.s:294    .text.HAL_SuspendTick:0000000000000000 $t
/var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//ccFeBzyd.s:299    .text.HAL_SuspendTick:0000000000000000 HAL_SuspendTick
/var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//ccFeBzyd.s:315    .text.HAL_SuspendTick:000000000000000c $d
/var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//ccFeBzyd.s:320    .text.HAL_ResumeTick:0000000000000000 $t
/var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//ccFeBzyd.s:325    .text.HAL_ResumeTick:0000000000000000 HAL_ResumeTick
/var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//ccFeBzyd.s:341    .text.HAL_ResumeTick:000000000000000c $d
/var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//ccFeBzyd.s:346    .text.HAL_GetHalVersion:0000000000000000 $t
/var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//ccFeBzyd.s:351    .text.HAL_GetHalVersion:0000000000000000 HAL_GetHalVersion
/var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//ccFeBzyd.s:364    .text.HAL_GetHalVersion:0000000000000004 $d
/var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//ccFeBzyd.s:369    .text.HAL_GetREVID:0000000000000000 $t
/var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//ccFeBzyd.s:374    .text.HAL_GetREVID:0000000000000000 HAL_GetREVID
/var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//ccFeBzyd.s:390    .text.HAL_GetREVID:0000000000000008 $d
/var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//ccFeBzyd.s:395    .text.HAL_GetDEVID:0000000000000000 $t
/var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//ccFeBzyd.s:400    .text.HAL_GetDEVID:0000000000000000 HAL_GetDEVID
/var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//ccFeBzyd.s:416    .text.HAL_GetDEVID:000000000000000c $d
/var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//ccFeBzyd.s:421    .text.HAL_DBGMCU_EnableDBGSleepMode:0000000000000000 $t
/var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//ccFeBzyd.s:426    .text.HAL_DBGMCU_EnableDBGSleepMode:0000000000000000 HAL_DBGMCU_EnableDBGSleepMode
/var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//ccFeBzyd.s:442    .text.HAL_DBGMCU_EnableDBGSleepMode:000000000000000c $d
/var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//ccFeBzyd.s:447    .text.HAL_DBGMCU_DisableDBGSleepMode:0000000000000000 $t
/var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//ccFeBzyd.s:452    .text.HAL_DBGMCU_DisableDBGSleepMode:0000000000000000 HAL_DBGMCU_DisableDBGSleepMode
/var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//ccFeBzyd.s:468    .text.HAL_DBGMCU_DisableDBGSleepMode:000000000000000c $d
/var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//ccFeBzyd.s:473    .text.HAL_DBGMCU_EnableDBGStopMode:0000000000000000 $t
/var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//ccFeBzyd.s:478    .text.HAL_DBGMCU_EnableDBGStopMode:0000000000000000 HAL_DBGMCU_EnableDBGStopMode
/var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//ccFeBzyd.s:494    .text.HAL_DBGMCU_EnableDBGStopMode:000000000000000c $d
/var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//ccFeBzyd.s:499    .text.HAL_DBGMCU_DisableDBGStopMode:0000000000000000 $t
/var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//ccFeBzyd.s:504    .text.HAL_DBGMCU_DisableDBGStopMode:0000000000000000 HAL_DBGMCU_DisableDBGStopMode
/var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//ccFeBzyd.s:520    .text.HAL_DBGMCU_DisableDBGStopMode:000000000000000c $d
/var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//ccFeBzyd.s:525    .text.HAL_DBGMCU_EnableDBGStandbyMode:0000000000000000 $t
/var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//ccFeBzyd.s:530    .text.HAL_DBGMCU_EnableDBGStandbyMode:0000000000000000 HAL_DBGMCU_EnableDBGStandbyMode
/var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//ccFeBzyd.s:546    .text.HAL_DBGMCU_EnableDBGStandbyMode:000000000000000c $d
/var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//ccFeBzyd.s:551    .text.HAL_DBGMCU_DisableDBGStandbyMode:0000000000000000 $t
/var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//ccFeBzyd.s:556    .text.HAL_DBGMCU_DisableDBGStandbyMode:0000000000000000 HAL_DBGMCU_DisableDBGStandbyMode
/var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//ccFeBzyd.s:572    .text.HAL_DBGMCU_DisableDBGStandbyMode:000000000000000c $d
/var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//ccFeBzyd.s:577    .text.HAL_EnableCompensationCell:0000000000000000 $t
/var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//ccFeBzyd.s:582    .text.HAL_EnableCompensationCell:0000000000000000 HAL_EnableCompensationCell
ARM GAS  /var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//ccFeBzyd.s 			page 32


/var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//ccFeBzyd.s:612    .text.HAL_EnableCompensationCell:0000000000000014 $d
/var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//ccFeBzyd.s:617    .text.HAL_DisableCompensationCell:0000000000000000 $t
/var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//ccFeBzyd.s:622    .text.HAL_DisableCompensationCell:0000000000000000 HAL_DisableCompensationCell
/var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//ccFeBzyd.s:651    .text.HAL_DisableCompensationCell:0000000000000014 $d
/var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//ccFeBzyd.s:656    .bss.uwTick:0000000000000000 $d
/var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//ccFeBzyd.s:660    .bss.uwTick:0000000000000000 uwTick
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_RCC_GetHCLKFreq
HAL_SYSTICK_Config
HAL_NVIC_SetPriority
HAL_NVIC_SetPriorityGrouping
