ARM GAS  /var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//cc05OIMQ.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"stm32f1xx_hal_adc_ex.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.HAL_ADCEx_Calibration_Start,"ax",%progbits
  19              		.align	1
  20              		.global	HAL_ADCEx_Calibration_Start
  21              		.thumb
  22              		.thumb_func
  24              	HAL_ADCEx_Calibration_Start:
  25              	.LFB63:
  26              		.file 1 "Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c"
   1:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** /**
   2:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   ******************************************************************************
   3:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @file    stm32f1xx_hal_adc_ex.c
   4:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @author  MCD Application Team
   5:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @version V1.0.4
   6:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @date    29-April-2016
   7:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @brief   This file provides firmware functions to manage the following 
   8:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *          functionalities of the Analog to Digital Convertor (ADC)
   9:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *          peripheral:
  10:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *           + Operation functions
  11:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *             ++ Start, stop, get result of conversions of injected
  12:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *                group, using 2 possible modes: polling, interruption.
  13:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *             ++ Multimode feature (available on devices with 2 ADCs or more)
  14:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *             ++ Calibration (ADC automatic self-calibration)
  15:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *           + Control functions
  16:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *             ++ Channels configuration on injected group
  17:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *          Other functions (generic functions) are available in file 
  18:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *          "stm32f1xx_hal_adc.c".
  19:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *
  20:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   @verbatim
  21:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   [..] 
  22:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   (@) Sections "ADC peripheral features" and "How to use this driver" are
  23:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       available in file of generic functions "stm32f1xx_hal_adc.c".
  24:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   [..]
  25:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   @endverbatim
  26:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   ******************************************************************************
  27:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @attention
  28:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *
  29:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * <h2><center>&copy; COPYRIGHT(c) 2016 STMicroelectronics</center></h2>
  30:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *
  31:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * Redistribution and use in source and binary forms, with or without modification,
  32:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * are permitted provided that the following conditions are met:
ARM GAS  /var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//cc05OIMQ.s 			page 2


  33:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  34:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *      this list of conditions and the following disclaimer.
  35:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  36:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *      this list of conditions and the following disclaimer in the documentation
  37:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *      and/or other materials provided with the distribution.
  38:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  39:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *      may be used to endorse or promote products derived from this software
  40:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *      without specific prior written permission.
  41:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *
  42:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  43:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  44:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  45:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  46:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  47:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  48:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  49:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  50:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  51:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  52:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *
  53:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   ******************************************************************************  
  54:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   */
  55:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
  56:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** /* Includes ------------------------------------------------------------------*/
  57:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** #include "stm32f1xx_hal.h"
  58:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
  59:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** /** @addtogroup STM32F1xx_HAL_Driver
  60:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @{
  61:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   */
  62:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
  63:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** /** @defgroup ADCEx ADCEx
  64:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @brief ADC Extension HAL module driver
  65:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @{
  66:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   */
  67:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
  68:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** #ifdef HAL_ADC_MODULE_ENABLED
  69:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
  70:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** /* Private typedef -----------------------------------------------------------*/
  71:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** /* Private define ------------------------------------------------------------*/
  72:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** /** @defgroup ADCEx_Private_Constants ADCEx Private Constants
  73:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @{
  74:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   */
  75:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
  76:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Delay for ADC calibration:                                               */
  77:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Hardware prerequisite before starting a calibration: the ADC must have   */
  78:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* been in power-on state for at least two ADC clock cycles.                */
  79:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Unit: ADC clock cycles                                                   */
  80:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   #define ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES       ((uint32_t) 2)
  81:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
  82:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Timeout value for ADC calibration                                        */
  83:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Value defined to be higher than worst cases: low clocks freq,            */
  84:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* maximum prescaler.                                                       */
  85:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Ex of profile low frequency : Clock source at 0.1 MHz, ADC clock         */
  86:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* prescaler 4, sampling time 12.5 ADC clock cycles, resolution 12 bits.    */
  87:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Unit: ms                                                                 */
  88:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   #define ADC_CALIBRATION_TIMEOUT         ((uint32_t) 10)
  89:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
ARM GAS  /var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//cc05OIMQ.s 			page 3


  90:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Delay for temperature sensor stabilization time.                         */
  91:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Maximum delay is 10us (refer to device datasheet, parameter tSTART).     */
  92:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Unit: us                                                                 */
  93:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   #define ADC_TEMPSENSOR_DELAY_US         ((uint32_t) 10)
  94:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
  95:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** /**
  96:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @}
  97:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   */
  98:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
  99:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** /* Private macro -------------------------------------------------------------*/
 100:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** /* Private variables ---------------------------------------------------------*/
 101:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** /* Private function prototypes -----------------------------------------------*/
 102:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** /* Private functions ---------------------------------------------------------*/
 103:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 104:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** /** @defgroup ADCEx_Exported_Functions ADCEx Exported Functions
 105:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @{
 106:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   */
 107:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 108:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** /** @defgroup ADCEx_Exported_Functions_Group1 Extended Extended IO operation functions
 109:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****  *  @brief    Extended Extended Input and Output operation functions
 110:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****  *
 111:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** @verbatim    
 112:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****  ===============================================================================
 113:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                       ##### IO operation functions #####
 114:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****  ===============================================================================
 115:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     [..]  This section provides functions allowing to:
 116:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       (+) Start conversion of injected group.
 117:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       (+) Stop conversion of injected group.
 118:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       (+) Poll for conversion complete on injected group.
 119:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       (+) Get result of injected channel conversion.
 120:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       (+) Start conversion of injected group and enable interruptions.
 121:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       (+) Stop conversion of injected group and disable interruptions.
 122:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 123:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       (+) Start multimode and enable DMA transfer.
 124:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       (+) Stop multimode and disable ADC DMA transfer.
 125:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       (+) Get result of multimode conversion.
 126:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 127:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       (+) Perform the ADC self-calibration for single or differential ending.
 128:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       (+) Get calibration factors for single or differential ending.
 129:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       (+) Set calibration factors for single or differential ending.
 130:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       
 131:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** @endverbatim
 132:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @{
 133:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   */
 134:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 135:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** /**
 136:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @brief  Perform an ADC automatic self-calibration
 137:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         Calibration prerequisite: ADC must be disabled (execute this
 138:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         function before HAL_ADC_Start() or after HAL_ADC_Stop() ).
 139:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         During calibration process, ADC is enabled. ADC is let enabled at
 140:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         the completion of this function.
 141:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @param  hadc: ADC handle
 142:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @retval HAL status
 143:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   */
 144:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
 145:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** {
  27              		.loc 1 145 0
ARM GAS  /var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//cc05OIMQ.s 			page 4


  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 8
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              	.LVL0:
  32 0000 73B5     		push	{r0, r1, r4, r5, r6, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 24
  35              		.cfi_offset 0, -24
  36              		.cfi_offset 1, -20
  37              		.cfi_offset 4, -16
  38              		.cfi_offset 5, -12
  39              		.cfi_offset 6, -8
  40              		.cfi_offset 14, -4
 146:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 147:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   uint32_t tickstart;
 148:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   __IO uint32_t wait_loop_index = 0;
  41              		.loc 1 148 0
  42 0002 0023     		movs	r3, #0
  43 0004 0193     		str	r3, [sp, #4]
 149:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 150:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Check the parameters */
 151:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 152:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 153:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Process locked */
 154:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
  44              		.loc 1 154 0
  45 0006 90F82430 		ldrb	r3, [r0, #36]	@ zero_extendqisi2
  46 000a 012B     		cmp	r3, #1
 145:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** {
  47              		.loc 1 145 0
  48 000c 0446     		mov	r4, r0
  49              		.loc 1 154 0
  50 000e 59D0     		beq	.L12
  51              		.loc 1 154 0 is_stmt 0 discriminator 2
  52 0010 0123     		movs	r3, #1
  53 0012 80F82430 		strb	r3, [r0, #36]
 155:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 156:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* 1. Calibration prerequisite:                                             */
 157:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
 158:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*      mode before ADC enable                                              */
 159:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Stop potential conversion on going, on regular and injected groups       */
 160:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Disable ADC peripheral */
 161:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
  54              		.loc 1 161 0 is_stmt 1 discriminator 2
  55 0016 FFF7FEFF 		bl	ADC_ConversionStop_Disable
  56              	.LVL1:
 162:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 163:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Check if ADC is effectively disabled */
 164:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   if (tmp_hal_status == HAL_OK)
  57              		.loc 1 164 0 discriminator 2
  58 001a 0546     		mov	r5, r0
  59 001c 0028     		cmp	r0, #0
  60 001e 4CD1     		bne	.L3
 165:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {
 166:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Set ADC state */
 167:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     ADC_STATE_CLR_SET(hadc->State,
  61              		.loc 1 167 0
ARM GAS  /var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//cc05OIMQ.s 			page 5


  62 0020 A36A     		ldr	r3, [r4, #40]
  63 0022 23F48853 		bic	r3, r3, #4352
  64 0026 23F00203 		bic	r3, r3, #2
  65 002a 43F00203 		orr	r3, r3, #2
  66 002e A362     		str	r3, [r4, #40]
 168:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 169:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                       HAL_ADC_STATE_BUSY_INTERNAL);
 170:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 171:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Hardware prerequisite: delay before starting the calibration.          */
 172:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
 173:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /*  - Wait for the expected ADC clock cycles delay */
 174:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     wait_loop_index = ((SystemCoreClock
 175:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                         / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
  67              		.loc 1 175 0
  68 0030 264B     		ldr	r3, .L18
  69 0032 0220     		movs	r0, #2
  70              	.LVL2:
  71 0034 1E68     		ldr	r6, [r3]
  72 0036 FFF7FEFF 		bl	HAL_RCCEx_GetPeriphCLKFreq
  73              	.LVL3:
  74 003a B6FBF0F0 		udiv	r0, r6, r0
 176:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                        * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
  75              		.loc 1 176 0
  76 003e 4600     		lsls	r6, r0, #1
 174:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     wait_loop_index = ((SystemCoreClock
  77              		.loc 1 174 0
  78 0040 0196     		str	r6, [sp, #4]
  79              	.L4:
 177:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 178:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     while(wait_loop_index != 0)
  80              		.loc 1 178 0 discriminator 1
  81 0042 019B     		ldr	r3, [sp, #4]
  82 0044 1BB1     		cbz	r3, .L15
 179:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
 180:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       wait_loop_index--;
  83              		.loc 1 180 0
  84 0046 019B     		ldr	r3, [sp, #4]
  85 0048 013B     		subs	r3, r3, #1
  86 004a 0193     		str	r3, [sp, #4]
  87 004c F9E7     		b	.L4
  88              	.L15:
 181:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
 182:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 183:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* 2. Enable the ADC peripheral */
 184:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     ADC_Enable(hadc);
  89              		.loc 1 184 0
  90 004e 2046     		mov	r0, r4
  91 0050 FFF7FEFF 		bl	ADC_Enable
  92              	.LVL4:
 185:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 186:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* 3. Resets ADC calibration registers */  
 187:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
  93              		.loc 1 187 0
  94 0054 2368     		ldr	r3, [r4]
  95 0056 9A68     		ldr	r2, [r3, #8]
  96 0058 42F00802 		orr	r2, r2, #8
  97 005c 9A60     		str	r2, [r3, #8]
ARM GAS  /var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//cc05OIMQ.s 			page 6


 188:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 189:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     tickstart = HAL_GetTick();  
  98              		.loc 1 189 0
  99 005e FFF7FEFF 		bl	HAL_GetTick
 100              	.LVL5:
 101 0062 0646     		mov	r6, r0
 102              	.LVL6:
 103              	.L6:
 190:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 191:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Wait for calibration reset completion */
 192:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 104              		.loc 1 192 0 discriminator 1
 105 0064 2368     		ldr	r3, [r4]
 106 0066 9A68     		ldr	r2, [r3, #8]
 107 0068 1207     		lsls	r2, r2, #28
 108 006a 05D5     		bpl	.L16
 193:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
 194:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 109              		.loc 1 194 0
 110 006c FFF7FEFF 		bl	HAL_GetTick
 111              	.LVL7:
 112 0070 801B     		subs	r0, r0, r6
 113 0072 0A28     		cmp	r0, #10
 114 0074 F6D9     		bls	.L6
 115 0076 0FE0     		b	.L13
 116              	.L16:
 195:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       {
 196:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         /* Update ADC state machine to error */
 197:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         ADC_STATE_CLR_SET(hadc->State,
 198:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                           HAL_ADC_STATE_BUSY_INTERNAL,
 199:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                           HAL_ADC_STATE_ERROR_INTERNAL);
 200:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         
 201:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         /* Process unlocked */
 202:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         __HAL_UNLOCK(hadc);
 203:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         
 204:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         return HAL_ERROR;
 205:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       }
 206:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
 207:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 208:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 209:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* 4. Start ADC calibration */
 210:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 117              		.loc 1 210 0
 118 0078 9A68     		ldr	r2, [r3, #8]
 119 007a 42F00402 		orr	r2, r2, #4
 120 007e 9A60     		str	r2, [r3, #8]
 211:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 212:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     tickstart = HAL_GetTick();  
 121              		.loc 1 212 0
 122 0080 FFF7FEFF 		bl	HAL_GetTick
 123              	.LVL8:
 124 0084 0646     		mov	r6, r0
 125              	.LVL9:
 126              	.L9:
 213:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 214:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Wait for calibration completion */
 215:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
ARM GAS  /var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//cc05OIMQ.s 			page 7


 127              		.loc 1 215 0 discriminator 1
 128 0086 2368     		ldr	r3, [r4]
 129 0088 9B68     		ldr	r3, [r3, #8]
 130 008a 5B07     		lsls	r3, r3, #29
 131 008c 0FD5     		bpl	.L17
 216:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
 217:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 132              		.loc 1 217 0
 133 008e FFF7FEFF 		bl	HAL_GetTick
 134              	.LVL10:
 135 0092 801B     		subs	r0, r0, r6
 136 0094 0A28     		cmp	r0, #10
 137 0096 F6D9     		bls	.L9
 138              	.L13:
 218:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       {
 219:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         /* Update ADC state machine to error */
 220:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         ADC_STATE_CLR_SET(hadc->State,
 139              		.loc 1 220 0
 140 0098 A36A     		ldr	r3, [r4, #40]
 141 009a 23F01203 		bic	r3, r3, #18
 142 009e 43F01003 		orr	r3, r3, #16
 143 00a2 A362     		str	r3, [r4, #40]
 221:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                           HAL_ADC_STATE_BUSY_INTERNAL,
 222:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                           HAL_ADC_STATE_ERROR_INTERNAL);
 223:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         
 224:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         /* Process unlocked */
 225:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         __HAL_UNLOCK(hadc);
 144              		.loc 1 225 0
 145 00a4 0023     		movs	r3, #0
 146 00a6 84F82430 		strb	r3, [r4, #36]
 226:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         
 227:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         return HAL_ERROR;
 147              		.loc 1 227 0
 148 00aa 0120     		movs	r0, #1
 149 00ac 0BE0     		b	.L2
 150              	.L17:
 228:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       }
 229:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
 230:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 231:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Set ADC state */
 232:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     ADC_STATE_CLR_SET(hadc->State,
 151              		.loc 1 232 0
 152 00ae A36A     		ldr	r3, [r4, #40]
 153 00b0 23F00303 		bic	r3, r3, #3
 154 00b4 43F00103 		orr	r3, r3, #1
 155 00b8 A362     		str	r3, [r4, #40]
 156              	.LVL11:
 157              	.L3:
 233:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                       HAL_ADC_STATE_BUSY_INTERNAL,
 234:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                       HAL_ADC_STATE_READY);
 235:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
 236:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 237:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Process unlocked */
 238:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   __HAL_UNLOCK(hadc);
 158              		.loc 1 238 0
 159 00ba 0023     		movs	r3, #0
 160 00bc 84F82430 		strb	r3, [r4, #36]
ARM GAS  /var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//cc05OIMQ.s 			page 8


 161:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 161              		.loc 1 161 0
 162 00c0 2846     		mov	r0, r5
 239:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 240:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Return function status */
 241:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   return tmp_hal_status;
 163              		.loc 1 241 0
 164 00c2 00E0     		b	.L2
 165              	.LVL12:
 166              	.L12:
 154:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 167              		.loc 1 154 0
 168 00c4 0220     		movs	r0, #2
 169              	.LVL13:
 170              	.L2:
 242:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** }
 171              		.loc 1 242 0
 172 00c6 02B0     		add	sp, sp, #8
 173              		@ sp needed
 174 00c8 70BD     		pop	{r4, r5, r6, pc}
 175              	.LVL14:
 176              	.L19:
 177 00ca 00BF     		.align	2
 178              	.L18:
 179 00cc 00000000 		.word	SystemCoreClock
 180              		.cfi_endproc
 181              	.LFE63:
 183              		.section	.text.HAL_ADCEx_InjectedStart,"ax",%progbits
 184              		.align	1
 185              		.global	HAL_ADCEx_InjectedStart
 186              		.thumb
 187              		.thumb_func
 189              	HAL_ADCEx_InjectedStart:
 190              	.LFB64:
 243:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 244:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** /**
 245:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @brief  Enables ADC, starts conversion of injected group.
 246:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         Interruptions enabled in this function: None.
 247:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @param  hadc: ADC handle
 248:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @retval HAL status
 249:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   */
 250:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef* hadc)
 251:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** {
 191              		.loc 1 251 0
 192              		.cfi_startproc
 193              		@ args = 0, pretend = 0, frame = 0
 194              		@ frame_needed = 0, uses_anonymous_args = 0
 195              	.LVL15:
 252:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 253:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 254:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Check the parameters */
 255:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 256:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 257:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Process locked */
 258:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 196              		.loc 1 258 0
 197 0000 90F82430 		ldrb	r3, [r0, #36]	@ zero_extendqisi2
ARM GAS  /var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//cc05OIMQ.s 			page 9


 198 0004 012B     		cmp	r3, #1
 251:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** {
 199              		.loc 1 251 0
 200 0006 10B5     		push	{r4, lr}
 201              	.LCFI1:
 202              		.cfi_def_cfa_offset 8
 203              		.cfi_offset 4, -8
 204              		.cfi_offset 14, -4
 251:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** {
 205              		.loc 1 251 0
 206 0008 0446     		mov	r4, r0
 207              		.loc 1 258 0
 208 000a 4BD0     		beq	.L29
 209              		.loc 1 258 0 is_stmt 0 discriminator 2
 210 000c 0123     		movs	r3, #1
 211 000e 80F82430 		strb	r3, [r0, #36]
 259:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 260:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Enable the ADC peripheral */
 261:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   tmp_hal_status = ADC_Enable(hadc);
 212              		.loc 1 261 0 is_stmt 1 discriminator 2
 213 0012 FFF7FEFF 		bl	ADC_Enable
 214              	.LVL16:
 262:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 263:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Start conversion if ADC is effectively enabled */
 264:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   if (tmp_hal_status == HAL_OK)
 215              		.loc 1 264 0 discriminator 2
 216 0016 0028     		cmp	r0, #0
 217 0018 40D1     		bne	.L22
 265:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {
 266:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Set ADC state                                                          */
 267:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* - Clear state bitfield related to injected group conversion results    */
 268:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* - Set state bitfield related to injected operation                     */
 269:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     ADC_STATE_CLR_SET(hadc->State,
 218              		.loc 1 269 0
 219 001a A36A     		ldr	r3, [r4, #40]
 270:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                       HAL_ADC_STATE_READY | HAL_ADC_STATE_INJ_EOC,
 271:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                       HAL_ADC_STATE_INJ_BUSY);
 272:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 273:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Case of independent mode or multimode (for devices with several ADCs): */
 274:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Set multimode state.                                                   */
 275:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 220              		.loc 1 275 0
 221 001c 224A     		ldr	r2, .L33
 269:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     ADC_STATE_CLR_SET(hadc->State,
 222              		.loc 1 269 0
 223 001e 23F44053 		bic	r3, r3, #12288
 224 0022 23F00103 		bic	r3, r3, #1
 225 0026 43F48053 		orr	r3, r3, #4096
 226 002a A362     		str	r3, [r4, #40]
 227              		.loc 1 275 0
 228 002c 2368     		ldr	r3, [r4]
 229 002e 9342     		cmp	r3, r2
 230 0030 05D1     		bne	.L23
 231              		.loc 1 275 0 is_stmt 0 discriminator 1
 232 0032 A2F58062 		sub	r2, r2, #1024
 233 0036 5268     		ldr	r2, [r2, #4]
 234 0038 12F4702F 		tst	r2, #983040
ARM GAS  /var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//cc05OIMQ.s 			page 10


 235 003c 03D1     		bne	.L24
 236              	.L23:
 276:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
 277:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 237              		.loc 1 277 0 is_stmt 1
 238 003e A26A     		ldr	r2, [r4, #40]
 239 0040 22F48012 		bic	r2, r2, #1048576
 240 0044 02E0     		b	.L31
 241              	.L24:
 278:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
 279:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     else
 280:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
 281:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 242              		.loc 1 281 0
 243 0046 A26A     		ldr	r2, [r4, #40]
 244 0048 42F48012 		orr	r2, r2, #1048576
 245              	.L31:
 246 004c A262     		str	r2, [r4, #40]
 282:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
 283:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 284:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Check if a regular conversion is ongoing */
 285:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Note: On this device, there is no ADC error code fields related to     */
 286:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /*       conversions on group injected only. In case of conversion on     */
 287:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /*       going on group regular, no error code is reset.                  */
 288:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 247              		.loc 1 288 0
 248 004e A26A     		ldr	r2, [r4, #40]
 249 0050 12F48072 		ands	r2, r2, #256
 289:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
 290:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       /* Reset ADC all error code fields */
 291:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       ADC_CLEAR_ERRORCODE(hadc);
 250              		.loc 1 291 0
 251 0054 08BF     		it	eq
 252 0056 E262     		streq	r2, [r4, #44]
 292:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
 293:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 294:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Process unlocked */
 295:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Unlock before starting ADC conversions: in case of potential           */
 296:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* interruption, to let the process to ADC IRQ Handler.                   */
 297:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     __HAL_UNLOCK(hadc);
 253              		.loc 1 297 0
 254 0058 0020     		movs	r0, #0
 255              	.LVL17:
 298:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 299:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Clear injected group conversion flag */
 300:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* (To ensure of no unknown state from potential previous ADC operations) */
 301:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 256              		.loc 1 301 0
 257 005a 6FF00402 		mvn	r2, #4
 297:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     __HAL_UNLOCK(hadc);
 258              		.loc 1 297 0
 259 005e 84F82400 		strb	r0, [r4, #36]
 260              		.loc 1 301 0
 261 0062 1A60     		str	r2, [r3]
 302:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         
 303:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Enable conversion of injected group.                                   */
 304:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* If software start has been selected, conversion starts immediately.    */
ARM GAS  /var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//cc05OIMQ.s 			page 11


 305:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* If external trigger has been selected, conversion will start at next   */
 306:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* trigger event.                                                         */
 307:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* If automatic injected conversion is enabled, conversion will start     */
 308:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* after next regular group conversion.                                   */
 309:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Case of multimode enabled (for devices with several ADCs): if ADC is   */
 310:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* slave, ADC is enabled only (conversion is not started). If ADC is      */
 311:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* master, ADC is enabled and conversion is started.                      */
 312:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO))
 262              		.loc 1 312 0
 263 0064 5A68     		ldr	r2, [r3, #4]
 264 0066 5205     		lsls	r2, r2, #21
 265 0068 1DD4     		bmi	.L21
 313:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
 314:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 266              		.loc 1 314 0
 267 006a 9A68     		ldr	r2, [r3, #8]
 268 006c 02F4E042 		and	r2, r2, #28672
 269 0070 B2F5E04F 		cmp	r2, #28672
 270 0074 0CD1     		bne	.L27
 271              		.loc 1 314 0 is_stmt 0 discriminator 1
 272 0076 0C4A     		ldr	r2, .L33
 273 0078 9342     		cmp	r3, r2
 274 007a 05D1     		bne	.L28
 315:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****           ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 275              		.loc 1 315 0 is_stmt 1 discriminator 1
 276 007c A2F58062 		sub	r2, r2, #1024
 277 0080 5268     		ldr	r2, [r2, #4]
 314:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 278              		.loc 1 314 0 discriminator 1
 279 0082 12F4702F 		tst	r2, #983040
 280 0086 03D1     		bne	.L27
 281              	.L28:
 316:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       {
 317:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         /* Start ADC conversion on injected group with SW start */
 318:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         SET_BIT(hadc->Instance->CR2, (ADC_CR2_JSWSTART | ADC_CR2_JEXTTRIG));
 282              		.loc 1 318 0
 283 0088 9A68     		ldr	r2, [r3, #8]
 284 008a 42F40212 		orr	r2, r2, #2129920
 285 008e 02E0     		b	.L32
 286              	.L27:
 319:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       }
 320:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       else
 321:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       {
 322:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         /* Start ADC conversion on injected group with external trigger */
 323:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         SET_BIT(hadc->Instance->CR2, ADC_CR2_JEXTTRIG);
 287              		.loc 1 323 0
 288 0090 9A68     		ldr	r2, [r3, #8]
 289 0092 42F40042 		orr	r2, r2, #32768
 290              	.L32:
 291 0096 9A60     		str	r2, [r3, #8]
 292 0098 0020     		movs	r0, #0
 293 009a 10BD     		pop	{r4, pc}
 294              	.LVL18:
 295              	.L22:
 324:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       }
 325:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
 326:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
ARM GAS  /var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//cc05OIMQ.s 			page 12


 327:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   else
 328:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {
 329:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Process unlocked */
 330:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     __HAL_UNLOCK(hadc);
 296              		.loc 1 330 0
 297 009c 0023     		movs	r3, #0
 298 009e 84F82430 		strb	r3, [r4, #36]
 299 00a2 10BD     		pop	{r4, pc}
 300              	.LVL19:
 301              	.L29:
 258:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 302              		.loc 1 258 0
 303 00a4 0220     		movs	r0, #2
 304              	.LVL20:
 305              	.L21:
 331:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
 332:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 333:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Return function status */
 334:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   return tmp_hal_status;
 335:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** }
 306              		.loc 1 335 0
 307 00a6 10BD     		pop	{r4, pc}
 308              	.LVL21:
 309              	.L34:
 310              		.align	2
 311              	.L33:
 312 00a8 00280140 		.word	1073817600
 313              		.cfi_endproc
 314              	.LFE64:
 316              		.section	.text.HAL_ADCEx_InjectedStop,"ax",%progbits
 317              		.align	1
 318              		.global	HAL_ADCEx_InjectedStop
 319              		.thumb
 320              		.thumb_func
 322              	HAL_ADCEx_InjectedStop:
 323              	.LFB65:
 336:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 337:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** /**
 338:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @brief  Stop conversion of injected channels. Disable ADC peripheral if
 339:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         no regular conversion is on going.
 340:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @note   If ADC must be disabled and if conversion is on going on 
 341:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         regular group, function HAL_ADC_Stop must be used to stop both
 342:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         injected and regular groups, and disable the ADC.
 343:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @note   If injected group mode auto-injection is enabled,
 344:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         function HAL_ADC_Stop must be used.
 345:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @note   In case of auto-injection mode, HAL_ADC_Stop must be used.
 346:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @param  hadc: ADC handle
 347:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @retval None
 348:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   */
 349:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_InjectedStop(ADC_HandleTypeDef* hadc)
 350:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** {
 324              		.loc 1 350 0
 325              		.cfi_startproc
 326              		@ args = 0, pretend = 0, frame = 0
 327              		@ frame_needed = 0, uses_anonymous_args = 0
 328              	.LVL22:
 351:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
ARM GAS  /var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//cc05OIMQ.s 			page 13


 352:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 353:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Check the parameters */
 354:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 355:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 356:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Process locked */
 357:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 329              		.loc 1 357 0
 330 0000 90F82430 		ldrb	r3, [r0, #36]	@ zero_extendqisi2
 331 0004 012B     		cmp	r3, #1
 350:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** {
 332              		.loc 1 350 0
 333 0006 10B5     		push	{r4, lr}
 334              	.LCFI2:
 335              		.cfi_def_cfa_offset 8
 336              		.cfi_offset 4, -8
 337              		.cfi_offset 14, -4
 350:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** {
 338              		.loc 1 350 0
 339 0008 0446     		mov	r4, r0
 340              		.loc 1 357 0
 341 000a 1ED0     		beq	.L39
 342              		.loc 1 357 0 is_stmt 0 discriminator 2
 343 000c 0123     		movs	r3, #1
 344 000e 80F82430 		strb	r3, [r0, #36]
 358:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 359:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Stop potential conversion and disable ADC peripheral                     */
 360:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Conditioned to:                                                          */
 361:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* - No conversion on the other group (regular group) is intended to        */
 362:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*   continue (injected and regular groups stop conversion and ADC disable  */
 363:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*   are common)                                                            */
 364:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* - In case of auto-injection mode, HAL_ADC_Stop must be used.             */
 365:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 345              		.loc 1 365 0 is_stmt 1 discriminator 2
 346 0012 836A     		ldr	r3, [r0, #40]
 347 0014 DA05     		lsls	r2, r3, #23
 348 0016 0FD4     		bmi	.L37
 366:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****      HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO)   )
 349              		.loc 1 366 0 discriminator 1
 350 0018 0368     		ldr	r3, [r0]
 351 001a 5B68     		ldr	r3, [r3, #4]
 365:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 352              		.loc 1 365 0 discriminator 1
 353 001c 5B05     		lsls	r3, r3, #21
 354 001e 0BD4     		bmi	.L37
 367:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {
 368:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Stop potential conversion on going, on regular and injected groups */
 369:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Disable ADC peripheral */
 370:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 355              		.loc 1 370 0
 356 0020 FFF7FEFF 		bl	ADC_ConversionStop_Disable
 357              	.LVL23:
 371:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 372:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Check if ADC is effectively disabled */
 373:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     if (tmp_hal_status == HAL_OK)
 358              		.loc 1 373 0
 359 0024 68B9     		cbnz	r0, .L38
 374:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
ARM GAS  /var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//cc05OIMQ.s 			page 14


 375:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       /* Set ADC state */
 376:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       ADC_STATE_CLR_SET(hadc->State,
 360              		.loc 1 376 0
 361 0026 A36A     		ldr	r3, [r4, #40]
 362 0028 23F48853 		bic	r3, r3, #4352
 363 002c 23F00103 		bic	r3, r3, #1
 364 0030 43F00103 		orr	r3, r3, #1
 365 0034 A362     		str	r3, [r4, #40]
 366 0036 04E0     		b	.L38
 367              	.LVL24:
 368              	.L37:
 377:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                         HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 378:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                         HAL_ADC_STATE_READY);
 379:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
 380:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
 381:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   else
 382:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {
 383:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Update ADC state machine to error */
 384:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 369              		.loc 1 384 0
 370 0038 A36A     		ldr	r3, [r4, #40]
 371 003a 43F02003 		orr	r3, r3, #32
 372 003e A362     		str	r3, [r4, #40]
 373              	.LVL25:
 385:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       
 386:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     tmp_hal_status = HAL_ERROR;
 374              		.loc 1 386 0
 375 0040 0120     		movs	r0, #1
 376              	.LVL26:
 377              	.L38:
 387:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
 388:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 389:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Process unlocked */
 390:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   __HAL_UNLOCK(hadc);
 378              		.loc 1 390 0
 379 0042 0023     		movs	r3, #0
 380 0044 84F82430 		strb	r3, [r4, #36]
 391:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 392:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Return function status */
 393:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   return tmp_hal_status;
 381              		.loc 1 393 0
 382 0048 10BD     		pop	{r4, pc}
 383              	.LVL27:
 384              	.L39:
 357:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 385              		.loc 1 357 0
 386 004a 0220     		movs	r0, #2
 387              	.LVL28:
 394:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** }
 388              		.loc 1 394 0
 389 004c 10BD     		pop	{r4, pc}
 390              		.cfi_endproc
 391              	.LFE65:
 393              		.section	.text.HAL_ADCEx_InjectedPollForConversion,"ax",%progbits
 394              		.align	1
 395              		.global	HAL_ADCEx_InjectedPollForConversion
 396              		.thumb
ARM GAS  /var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//cc05OIMQ.s 			page 15


 397              		.thumb_func
 399              	HAL_ADCEx_InjectedPollForConversion:
 400              	.LFB66:
 395:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 396:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** /**
 397:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @brief  Wait for injected group conversion to be completed.
 398:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @param  hadc: ADC handle
 399:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @param  Timeout: Timeout value in millisecond.
 400:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @retval HAL status
 401:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   */
 402:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_InjectedPollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
 403:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** {
 401              		.loc 1 403 0
 402              		.cfi_startproc
 403              		@ args = 0, pretend = 0, frame = 8
 404              		@ frame_needed = 0, uses_anonymous_args = 0
 405              	.LVL29:
 406 0000 F7B5     		push	{r0, r1, r2, r4, r5, r6, r7, lr}
 407              	.LCFI3:
 408              		.cfi_def_cfa_offset 32
 409              		.cfi_offset 0, -32
 410              		.cfi_offset 1, -28
 411              		.cfi_offset 2, -24
 412              		.cfi_offset 4, -20
 413              		.cfi_offset 5, -16
 414              		.cfi_offset 6, -12
 415              		.cfi_offset 7, -8
 416              		.cfi_offset 14, -4
 417              		.loc 1 403 0
 418 0002 0446     		mov	r4, r0
 404:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   uint32_t tickstart;
 405:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 406:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Variables for polling in case of scan mode enabled and polling for each  */
 407:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* conversion.                                                              */
 408:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   __IO uint32_t Conversion_Timeout_CPU_cycles = 0;
 419              		.loc 1 408 0
 420 0004 0023     		movs	r3, #0
 421 0006 0193     		str	r3, [sp, #4]
 422              	.LVL30:
 403:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** {
 423              		.loc 1 403 0
 424 0008 0D46     		mov	r5, r1
 409:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   uint32_t Conversion_Timeout_CPU_cycles_max = 0;
 410:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 411:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Check the parameters */
 412:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 413:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 414:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Get timeout */
 415:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   tickstart = HAL_GetTick();  
 425              		.loc 1 415 0
 426 000a FFF7FEFF 		bl	HAL_GetTick
 427              	.LVL31:
 416:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****      
 417:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Polling for end of conversion: differentiation if single/sequence        */
 418:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* conversion.                                                              */
 419:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* For injected group, flag JEOC is set only at the end of the sequence,    */
 420:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* not for each conversion within the sequence.                             */
ARM GAS  /var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//cc05OIMQ.s 			page 16


 421:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*  - If single conversion for injected group (scan mode disabled or        */
 422:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*    InjectedNbrOfConversion ==1), flag JEOC is used to determine the      */
 423:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*    conversion completion.                                                */
 424:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*  - If sequence conversion for injected group (scan mode enabled and      */
 425:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*    InjectedNbrOfConversion >=2), flag JEOC is set only at the end of the */
 426:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*    sequence.                                                             */
 427:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*    To poll for each conversion, the maximum conversion time is computed  */
 428:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*    from ADC conversion time (selected sampling time + conversion time of */
 429:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
 430:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
 431:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*    As flag JEOC is not set after each conversion, no timeout status can  */
 432:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*    be set.                                                               */
 433:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   if ((hadc->Instance->JSQR & ADC_JSQR_JL) == RESET)
 428              		.loc 1 433 0
 429 000e 2368     		ldr	r3, [r4]
 430 0010 9B6B     		ldr	r3, [r3, #56]
 431 0012 13F4401F 		tst	r3, #3145728
 415:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   tickstart = HAL_GetTick();  
 432              		.loc 1 415 0
 433 0016 0646     		mov	r6, r0
 434              	.LVL32:
 435              		.loc 1 433 0
 436 0018 0DD1     		bne	.L78
 437              	.LVL33:
 438              	.L48:
 434:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {
 435:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Wait until End of Conversion flag is raised */
 436:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_JEOC))
 439              		.loc 1 436 0
 440 001a 2268     		ldr	r2, [r4]
 441              	.L44:
 442              		.loc 1 436 0 is_stmt 0 discriminator 1
 443 001c 1368     		ldr	r3, [r2]
 444 001e 5807     		lsls	r0, r3, #29
 445 0020 2AD4     		bmi	.L60
 437:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
 438:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       /* Check if timeout is disabled (set to infinite wait) */
 439:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       if(Timeout != HAL_MAX_DELAY)
 446              		.loc 1 439 0 is_stmt 1
 447 0022 6F1C     		adds	r7, r5, #1
 448 0024 FAD0     		beq	.L44
 440:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       {
 441:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 449              		.loc 1 441 0
 450 0026 002D     		cmp	r5, #0
 451 0028 52D0     		beq	.L58
 452              		.loc 1 441 0 is_stmt 0 discriminator 1
 453 002a FFF7FEFF 		bl	HAL_GetTick
 454              	.LVL34:
 455 002e 801B     		subs	r0, r0, r6
 456 0030 A842     		cmp	r0, r5
 457 0032 F2D9     		bls	.L48
 458 0034 4CE0     		b	.L58
 459              	.LVL35:
 460              	.L78:
 442:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         {
 443:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****           /* Update ADC state machine to timeout */
ARM GAS  /var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//cc05OIMQ.s 			page 17


 444:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 445:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****           
 446:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****           /* Process unlocked */
 447:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****           __HAL_UNLOCK(hadc);
 448:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****           
 449:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****           return HAL_TIMEOUT;
 450:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         }
 451:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       }
 452:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
 453:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
 454:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   else
 455:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {
 456:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Replace polling by wait for maximum conversion time */
 457:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
 458:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /*    and ADC maximum conversion cycles on all channels.                  */
 459:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /*  - Wait for the expected ADC clock cycles delay                        */
 460:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 461:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                                           / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 461              		.loc 1 461 0 is_stmt 1
 462 0036 3D4B     		ldr	r3, .L79
 463 0038 0220     		movs	r0, #2
 464              	.LVL36:
 465 003a 1F68     		ldr	r7, [r3]
 466 003c FFF7FEFF 		bl	HAL_RCCEx_GetPeriphCLKFreq
 467              	.LVL37:
 462:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                                          * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 468              		.loc 1 462 0
 469 0040 2368     		ldr	r3, [r4]
 470 0042 3B4A     		ldr	r2, .L79+4
 471 0044 1969     		ldr	r1, [r3, #16]
 472 0046 0A40     		ands	r2, r2, r1
 461:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                                           / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 473              		.loc 1 461 0
 474 0048 B7FBF0F0 		udiv	r0, r7, r0
 475              		.loc 1 462 0
 476 004c 1ABB     		cbnz	r2, .L52
 477              		.loc 1 462 0 is_stmt 0 discriminator 1
 478 004e D968     		ldr	r1, [r3, #12]
 479 0050 384A     		ldr	r2, .L79+8
 480 0052 0A40     		ands	r2, r2, r1
 481 0054 FAB9     		cbnz	r2, .L52
 482 0056 1969     		ldr	r1, [r3, #16]
 483 0058 374A     		ldr	r2, .L79+12
 484 005a 0A40     		ands	r2, r2, r1
 485 005c 002A     		cmp	r2, #0
 486 005e 2ED1     		bne	.L63
 487 0060 DB68     		ldr	r3, [r3, #12]
 488 0062 364A     		ldr	r2, .L79+16
 489 0064 1A40     		ands	r2, r2, r3
 490 0066 002A     		cmp	r2, #0
 491 0068 0CBF     		ite	eq
 492 006a 1423     		moveq	r3, #20
 493 006c 2923     		movne	r3, #41
 494              	.L53:
 460:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 495              		.loc 1 460 0 is_stmt 1
 496 006e 00FB03F7 		mul	r7, r0, r3
ARM GAS  /var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//cc05OIMQ.s 			page 18


 497              	.LVL38:
 498              	.L55:
 463:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 464:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 499              		.loc 1 464 0 discriminator 1
 500 0072 019B     		ldr	r3, [sp, #4]
 501 0074 BB42     		cmp	r3, r7
 502 0076 28D3     		bcc	.L59
 503              	.LVL39:
 504              	.L60:
 465:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
 466:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       /* Check if timeout is disabled (set to infinite wait) */
 467:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       if(Timeout != HAL_MAX_DELAY)
 468:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       {
 469:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 470:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         {
 471:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****           /* Update ADC state machine to timeout */
 472:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 473:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 474:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****           /* Process unlocked */
 475:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****           __HAL_UNLOCK(hadc);
 476:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****           
 477:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****           return HAL_TIMEOUT;
 478:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         }
 479:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       }
 480:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       Conversion_Timeout_CPU_cycles ++;
 481:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
 482:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
 483:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 484:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Clear injected group conversion flag */
 485:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Note: On STM32F1 ADC, clear regular conversion flag raised               */
 486:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* simultaneously.                                                          */
 487:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JSTRT | ADC_FLAG_JEOC | ADC_FLAG_EOC);
 505              		.loc 1 487 0
 506 0078 2368     		ldr	r3, [r4]
 507 007a 6FF00E02 		mvn	r2, #14
 508 007e 1A60     		str	r2, [r3]
 488:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 489:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Update ADC state machine */
 490:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 509              		.loc 1 490 0
 510 0080 A26A     		ldr	r2, [r4, #40]
 511 0082 42F40052 		orr	r2, r2, #8192
 512 0086 A262     		str	r2, [r4, #40]
 491:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 492:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Determine whether any further conversion upcoming on group injected      */
 493:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* by external trigger or by automatic injected conversion                  */
 494:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* from group regular.                                                      */
 495:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 513              		.loc 1 495 0
 514 0088 9A68     		ldr	r2, [r3, #8]
 515 008a 02F4E042 		and	r2, r2, #28672
 516 008e B2F5E04F 		cmp	r2, #28672
 517 0092 2FD1     		bne	.L77
 518 0094 3CE0     		b	.L50
 519              	.LVL40:
 520              	.L52:
ARM GAS  /var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//cc05OIMQ.s 			page 19


 462:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                                          * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 521              		.loc 1 462 0 discriminator 2
 522 0096 1969     		ldr	r1, [r3, #16]
 523 0098 274A     		ldr	r2, .L79+12
 524 009a 0A40     		ands	r2, r2, r1
 525 009c 1AB9     		cbnz	r2, .L54
 462:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                                          * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 526              		.loc 1 462 0 is_stmt 0 discriminator 1
 527 009e D968     		ldr	r1, [r3, #12]
 528 00a0 264A     		ldr	r2, .L79+16
 529 00a2 0A40     		ands	r2, r2, r1
 530 00a4 6AB1     		cbz	r2, .L65
 531              	.L54:
 462:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                                          * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 532              		.loc 1 462 0 discriminator 2
 533 00a6 1969     		ldr	r1, [r3, #16]
 534 00a8 254A     		ldr	r2, .L79+20
 535 00aa 0A40     		ands	r2, r2, r1
 536 00ac 5AB9     		cbnz	r2, .L66
 462:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                                          * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 537              		.loc 1 462 0 discriminator 1
 538 00ae DB68     		ldr	r3, [r3, #12]
 539 00b0 234A     		ldr	r2, .L79+20
 540 00b2 1A40     		ands	r2, r2, r3
 541 00b4 002A     		cmp	r2, #0
 542 00b6 0CBF     		ite	eq
 543 00b8 5423     		moveq	r3, #84
 544 00ba FC23     		movne	r3, #252
 545 00bc D7E7     		b	.L53
 546              	.L63:
 462:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                                          * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 547              		.loc 1 462 0
 548 00be 2923     		movs	r3, #41
 549 00c0 D5E7     		b	.L53
 550              	.L65:
 551 00c2 5423     		movs	r3, #84
 552 00c4 D3E7     		b	.L53
 553              	.L66:
 554 00c6 FC23     		movs	r3, #252
 555 00c8 D1E7     		b	.L53
 556              	.LVL41:
 557              	.L59:
 467:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       if(Timeout != HAL_MAX_DELAY)
 558              		.loc 1 467 0 is_stmt 1
 559 00ca 691C     		adds	r1, r5, #1
 560 00cc 0ED0     		beq	.L68
 469:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 561              		.loc 1 469 0
 562 00ce 45B9     		cbnz	r5, .L57
 563              	.LVL42:
 564              	.L58:
 472:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 565              		.loc 1 472 0
 566 00d0 A36A     		ldr	r3, [r4, #40]
 567 00d2 43F00403 		orr	r3, r3, #4
 568 00d6 A362     		str	r3, [r4, #40]
 475:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****           __HAL_UNLOCK(hadc);
ARM GAS  /var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//cc05OIMQ.s 			page 20


 569              		.loc 1 475 0
 570 00d8 0023     		movs	r3, #0
 571 00da 84F82430 		strb	r3, [r4, #36]
 477:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****           return HAL_TIMEOUT;
 572              		.loc 1 477 0
 573 00de 0320     		movs	r0, #3
 574 00e0 22E0     		b	.L46
 575              	.LVL43:
 576              	.L57:
 469:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 577              		.loc 1 469 0 discriminator 1
 578 00e2 FFF7FEFF 		bl	HAL_GetTick
 579              	.LVL44:
 580 00e6 801B     		subs	r0, r0, r6
 581 00e8 A842     		cmp	r0, r5
 582 00ea F1D8     		bhi	.L58
 583              	.L68:
 480:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       Conversion_Timeout_CPU_cycles ++;
 584              		.loc 1 480 0
 585 00ec 019B     		ldr	r3, [sp, #4]
 586 00ee 0133     		adds	r3, r3, #1
 587 00f0 0193     		str	r3, [sp, #4]
 588 00f2 BEE7     		b	.L55
 589              	.LVL45:
 590              	.L77:
 496:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****      (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 591              		.loc 1 496 0 discriminator 1
 592 00f4 5A68     		ldr	r2, [r3, #4]
 495:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 593              		.loc 1 495 0 discriminator 1
 594 00f6 5205     		lsls	r2, r2, #21
 595 00f8 01D5     		bpl	.L61
 596              	.L62:
 497:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****      (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 498:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 499:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {
 500:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Set ADC state */
 501:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 502:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 503:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 504:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
 505:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 506:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
 507:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
 508:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 509:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Return ADC state */
 510:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   return HAL_OK;
 597              		.loc 1 510 0
 598 00fa 0020     		movs	r0, #0
 599 00fc 14E0     		b	.L46
 600              	.L61:
 497:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****      (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 601              		.loc 1 497 0
 602 00fe 9B68     		ldr	r3, [r3, #8]
 603 0100 03F46023 		and	r3, r3, #917504
 496:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****      (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 604              		.loc 1 496 0
ARM GAS  /var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//cc05OIMQ.s 			page 21


 605 0104 B3F5602F 		cmp	r3, #917504
 606 0108 F7D1     		bne	.L62
 497:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****      (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 607              		.loc 1 497 0
 608 010a E368     		ldr	r3, [r4, #12]
 609 010c 002B     		cmp	r3, #0
 610 010e F4D1     		bne	.L62
 611              	.L50:
 501:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 612              		.loc 1 501 0
 613 0110 A36A     		ldr	r3, [r4, #40]
 614 0112 23F48053 		bic	r3, r3, #4096
 615 0116 A362     		str	r3, [r4, #40]
 503:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 616              		.loc 1 503 0
 617 0118 A06A     		ldr	r0, [r4, #40]
 618 011a 10F48070 		ands	r0, r0, #256
 619 011e ECD1     		bne	.L62
 505:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 620              		.loc 1 505 0
 621 0120 A36A     		ldr	r3, [r4, #40]
 622 0122 43F00103 		orr	r3, r3, #1
 623 0126 A362     		str	r3, [r4, #40]
 624              	.L46:
 511:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** }
 625              		.loc 1 511 0
 626 0128 03B0     		add	sp, sp, #12
 627              		@ sp needed
 628 012a F0BD     		pop	{r4, r5, r6, r7, pc}
 629              	.LVL46:
 630              	.L80:
 631              		.align	2
 632              	.L79:
 633 012c 00000000 		.word	SystemCoreClock
 634 0130 24499224 		.word	613566756
 635 0134 24499200 		.word	9586980
 636 0138 92244912 		.word	306783378
 637 013c 92244900 		.word	4793490
 638 0140 49922400 		.word	2396745
 639              		.cfi_endproc
 640              	.LFE66:
 642              		.section	.text.HAL_ADCEx_InjectedStart_IT,"ax",%progbits
 643              		.align	1
 644              		.global	HAL_ADCEx_InjectedStart_IT
 645              		.thumb
 646              		.thumb_func
 648              	HAL_ADCEx_InjectedStart_IT:
 649              	.LFB67:
 512:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 513:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** /**
 514:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @brief  Enables ADC, starts conversion of injected group with interruption.
 515:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *          - JEOC (end of conversion of injected group)
 516:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         Each of these interruptions has its dedicated callback function.
 517:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @param  hadc: ADC handle
 518:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @retval HAL status.
 519:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   */
 520:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef* hadc)
ARM GAS  /var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//cc05OIMQ.s 			page 22


 521:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** {
 650              		.loc 1 521 0
 651              		.cfi_startproc
 652              		@ args = 0, pretend = 0, frame = 0
 653              		@ frame_needed = 0, uses_anonymous_args = 0
 654              	.LVL47:
 522:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 523:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 524:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Check the parameters */
 525:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 526:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 527:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Process locked */
 528:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 655              		.loc 1 528 0
 656 0000 90F82430 		ldrb	r3, [r0, #36]	@ zero_extendqisi2
 657 0004 012B     		cmp	r3, #1
 521:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** {
 658              		.loc 1 521 0
 659 0006 10B5     		push	{r4, lr}
 660              	.LCFI4:
 661              		.cfi_def_cfa_offset 8
 662              		.cfi_offset 4, -8
 663              		.cfi_offset 14, -4
 521:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** {
 664              		.loc 1 521 0
 665 0008 0446     		mov	r4, r0
 666              		.loc 1 528 0
 667 000a 4FD0     		beq	.L90
 668              		.loc 1 528 0 is_stmt 0 discriminator 2
 669 000c 0123     		movs	r3, #1
 670 000e 80F82430 		strb	r3, [r0, #36]
 529:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 530:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Enable the ADC peripheral */
 531:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   tmp_hal_status = ADC_Enable(hadc);
 671              		.loc 1 531 0 is_stmt 1 discriminator 2
 672 0012 FFF7FEFF 		bl	ADC_Enable
 673              	.LVL48:
 532:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 533:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Start conversion if ADC is effectively enabled */
 534:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   if (tmp_hal_status == HAL_OK)
 674              		.loc 1 534 0 discriminator 2
 675 0016 0028     		cmp	r0, #0
 676 0018 44D1     		bne	.L83
 535:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {
 536:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Set ADC state                                                          */
 537:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* - Clear state bitfield related to injected group conversion results    */
 538:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* - Set state bitfield related to injected operation                     */
 539:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     ADC_STATE_CLR_SET(hadc->State,
 677              		.loc 1 539 0
 678 001a A36A     		ldr	r3, [r4, #40]
 540:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                       HAL_ADC_STATE_READY | HAL_ADC_STATE_INJ_EOC,
 541:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                       HAL_ADC_STATE_INJ_BUSY);
 542:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 543:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Case of independent mode or multimode (for devices with several ADCs): */
 544:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Set multimode state.                                                   */
 545:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 679              		.loc 1 545 0
ARM GAS  /var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//cc05OIMQ.s 			page 23


 680 001c 244A     		ldr	r2, .L94
 539:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     ADC_STATE_CLR_SET(hadc->State,
 681              		.loc 1 539 0
 682 001e 23F44053 		bic	r3, r3, #12288
 683 0022 23F00103 		bic	r3, r3, #1
 684 0026 43F48053 		orr	r3, r3, #4096
 685 002a A362     		str	r3, [r4, #40]
 686              		.loc 1 545 0
 687 002c 2368     		ldr	r3, [r4]
 688 002e 9342     		cmp	r3, r2
 689 0030 05D1     		bne	.L84
 690              		.loc 1 545 0 is_stmt 0 discriminator 1
 691 0032 A2F58062 		sub	r2, r2, #1024
 692 0036 5268     		ldr	r2, [r2, #4]
 693 0038 12F4702F 		tst	r2, #983040
 694 003c 03D1     		bne	.L85
 695              	.L84:
 546:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
 547:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 696              		.loc 1 547 0 is_stmt 1
 697 003e A26A     		ldr	r2, [r4, #40]
 698 0040 22F48012 		bic	r2, r2, #1048576
 699 0044 02E0     		b	.L92
 700              	.L85:
 548:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
 549:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     else
 550:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
 551:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 701              		.loc 1 551 0
 702 0046 A26A     		ldr	r2, [r4, #40]
 703 0048 42F48012 		orr	r2, r2, #1048576
 704              	.L92:
 705 004c A262     		str	r2, [r4, #40]
 552:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
 553:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 554:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Check if a regular conversion is ongoing */
 555:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Note: On this device, there is no ADC error code fields related to     */
 556:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /*       conversions on group injected only. In case of conversion on     */
 557:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /*       going on group regular, no error code is reset.                  */
 558:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 706              		.loc 1 558 0
 707 004e A26A     		ldr	r2, [r4, #40]
 708 0050 12F48072 		ands	r2, r2, #256
 559:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
 560:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       /* Reset ADC all error code fields */
 561:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       ADC_CLEAR_ERRORCODE(hadc);
 709              		.loc 1 561 0
 710 0054 08BF     		it	eq
 711 0056 E262     		streq	r2, [r4, #44]
 562:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
 563:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 564:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Process unlocked */
 565:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Unlock before starting ADC conversions: in case of potential           */
 566:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* interruption, to let the process to ADC IRQ Handler.                   */
 567:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     __HAL_UNLOCK(hadc);
 712              		.loc 1 567 0
 713 0058 0020     		movs	r0, #0
ARM GAS  /var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//cc05OIMQ.s 			page 24


 714              	.LVL49:
 568:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 569:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Clear injected group conversion flag */
 570:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* (To ensure of no unknown state from potential previous ADC operations) */
 571:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 715              		.loc 1 571 0
 716 005a 6FF00402 		mvn	r2, #4
 567:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     __HAL_UNLOCK(hadc);
 717              		.loc 1 567 0
 718 005e 84F82400 		strb	r0, [r4, #36]
 719              		.loc 1 571 0
 720 0062 1A60     		str	r2, [r3]
 572:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 573:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Enable end of conversion interrupt for injected channels */
 574:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 721              		.loc 1 574 0
 722 0064 5A68     		ldr	r2, [r3, #4]
 723 0066 42F08002 		orr	r2, r2, #128
 724 006a 5A60     		str	r2, [r3, #4]
 575:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 576:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Start conversion of injected group if software start has been selected */
 577:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* and if automatic injected conversion is disabled.                      */
 578:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* If external trigger has been selected, conversion will start at next   */
 579:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* trigger event.                                                         */
 580:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* If automatic injected conversion is enabled, conversion will start     */
 581:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* after next regular group conversion.                                   */
 582:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO))
 725              		.loc 1 582 0
 726 006c 5A68     		ldr	r2, [r3, #4]
 727 006e 5205     		lsls	r2, r2, #21
 728 0070 1DD4     		bmi	.L82
 583:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
 584:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 729              		.loc 1 584 0
 730 0072 9A68     		ldr	r2, [r3, #8]
 731 0074 02F4E042 		and	r2, r2, #28672
 732 0078 B2F5E04F 		cmp	r2, #28672
 733 007c 0CD1     		bne	.L88
 734              		.loc 1 584 0 is_stmt 0 discriminator 1
 735 007e 0C4A     		ldr	r2, .L94
 736 0080 9342     		cmp	r3, r2
 737 0082 05D1     		bne	.L89
 585:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****           ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 738              		.loc 1 585 0 is_stmt 1 discriminator 1
 739 0084 A2F58062 		sub	r2, r2, #1024
 740 0088 5268     		ldr	r2, [r2, #4]
 584:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 741              		.loc 1 584 0 discriminator 1
 742 008a 12F4702F 		tst	r2, #983040
 743 008e 03D1     		bne	.L88
 744              	.L89:
 586:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       {
 587:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         /* Start ADC conversion on injected group with SW start */
 588:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         SET_BIT(hadc->Instance->CR2, (ADC_CR2_JSWSTART | ADC_CR2_JEXTTRIG));
 745              		.loc 1 588 0
 746 0090 9A68     		ldr	r2, [r3, #8]
 747 0092 42F40212 		orr	r2, r2, #2129920
ARM GAS  /var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//cc05OIMQ.s 			page 25


 748 0096 02E0     		b	.L93
 749              	.L88:
 589:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       }
 590:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       else
 591:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       {
 592:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         /* Start ADC conversion on injected group with external trigger */
 593:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         SET_BIT(hadc->Instance->CR2, ADC_CR2_JEXTTRIG);
 750              		.loc 1 593 0
 751 0098 9A68     		ldr	r2, [r3, #8]
 752 009a 42F40042 		orr	r2, r2, #32768
 753              	.L93:
 754 009e 9A60     		str	r2, [r3, #8]
 755 00a0 0020     		movs	r0, #0
 756 00a2 10BD     		pop	{r4, pc}
 757              	.LVL50:
 758              	.L83:
 594:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       }
 595:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
 596:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
 597:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   else
 598:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {
 599:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Process unlocked */
 600:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     __HAL_UNLOCK(hadc);
 759              		.loc 1 600 0
 760 00a4 0023     		movs	r3, #0
 761 00a6 84F82430 		strb	r3, [r4, #36]
 762 00aa 10BD     		pop	{r4, pc}
 763              	.LVL51:
 764              	.L90:
 528:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 765              		.loc 1 528 0
 766 00ac 0220     		movs	r0, #2
 767              	.LVL52:
 768              	.L82:
 601:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
 602:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 603:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Return function status */
 604:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   return tmp_hal_status;
 605:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** }
 769              		.loc 1 605 0
 770 00ae 10BD     		pop	{r4, pc}
 771              	.LVL53:
 772              	.L95:
 773              		.align	2
 774              	.L94:
 775 00b0 00280140 		.word	1073817600
 776              		.cfi_endproc
 777              	.LFE67:
 779              		.section	.text.HAL_ADCEx_InjectedStop_IT,"ax",%progbits
 780              		.align	1
 781              		.global	HAL_ADCEx_InjectedStop_IT
 782              		.thumb
 783              		.thumb_func
 785              	HAL_ADCEx_InjectedStop_IT:
 786              	.LFB68:
 606:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 607:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** /**
ARM GAS  /var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//cc05OIMQ.s 			page 26


 608:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @brief  Stop conversion of injected channels, disable interruption of 
 609:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         end-of-conversion. Disable ADC peripheral if no regular conversion
 610:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         is on going.
 611:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @note   If ADC must be disabled and if conversion is on going on 
 612:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         regular group, function HAL_ADC_Stop must be used to stop both
 613:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         injected and regular groups, and disable the ADC.
 614:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @note   If injected group mode auto-injection is enabled,
 615:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         function HAL_ADC_Stop must be used.
 616:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @param  hadc: ADC handle
 617:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @retval None
 618:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   */
 619:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_InjectedStop_IT(ADC_HandleTypeDef* hadc)
 620:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** {
 787              		.loc 1 620 0
 788              		.cfi_startproc
 789              		@ args = 0, pretend = 0, frame = 0
 790              		@ frame_needed = 0, uses_anonymous_args = 0
 791              	.LVL54:
 621:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 622:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 623:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Check the parameters */
 624:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 625:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 626:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Process locked */
 627:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 792              		.loc 1 627 0
 793 0000 90F82430 		ldrb	r3, [r0, #36]	@ zero_extendqisi2
 794 0004 012B     		cmp	r3, #1
 620:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** {
 795              		.loc 1 620 0
 796 0006 10B5     		push	{r4, lr}
 797              	.LCFI5:
 798              		.cfi_def_cfa_offset 8
 799              		.cfi_offset 4, -8
 800              		.cfi_offset 14, -4
 620:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** {
 801              		.loc 1 620 0
 802 0008 0446     		mov	r4, r0
 803              		.loc 1 627 0
 804 000a 23D0     		beq	.L100
 805              		.loc 1 627 0 is_stmt 0 discriminator 2
 806 000c 0123     		movs	r3, #1
 807 000e 80F82430 		strb	r3, [r0, #36]
 628:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 629:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Stop potential conversion and disable ADC peripheral                     */
 630:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Conditioned to:                                                          */
 631:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* - No conversion on the other group (regular group) is intended to        */
 632:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*   continue (injected and regular groups stop conversion and ADC disable  */
 633:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*   are common)                                                            */
 634:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* - In case of auto-injection mode, HAL_ADC_Stop must be used.             */ 
 635:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 808              		.loc 1 635 0 is_stmt 1 discriminator 2
 809 0012 836A     		ldr	r3, [r0, #40]
 810 0014 DA05     		lsls	r2, r3, #23
 811 0016 14D4     		bmi	.L98
 636:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****      HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO)   )
 812              		.loc 1 636 0 discriminator 1
ARM GAS  /var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//cc05OIMQ.s 			page 27


 813 0018 0368     		ldr	r3, [r0]
 814 001a 5B68     		ldr	r3, [r3, #4]
 635:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 815              		.loc 1 635 0 discriminator 1
 816 001c 5B05     		lsls	r3, r3, #21
 817 001e 10D4     		bmi	.L98
 637:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {
 638:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Stop potential conversion on going, on regular and injected groups */
 639:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Disable ADC peripheral */
 640:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 818              		.loc 1 640 0
 819 0020 FFF7FEFF 		bl	ADC_ConversionStop_Disable
 820              	.LVL55:
 641:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 642:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Check if ADC is effectively disabled */
 643:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     if (tmp_hal_status == HAL_OK)
 821              		.loc 1 643 0
 822 0024 90B9     		cbnz	r0, .L99
 644:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
 645:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       /* Disable ADC end of conversion interrupt for injected channels */
 646:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 823              		.loc 1 646 0
 824 0026 2368     		ldr	r3, [r4]
 825 0028 5A68     		ldr	r2, [r3, #4]
 826 002a 22F08002 		bic	r2, r2, #128
 827 002e 5A60     		str	r2, [r3, #4]
 647:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       
 648:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       /* Set ADC state */
 649:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       ADC_STATE_CLR_SET(hadc->State,
 828              		.loc 1 649 0
 829 0030 A36A     		ldr	r3, [r4, #40]
 830 0032 23F48853 		bic	r3, r3, #4352
 831 0036 23F00103 		bic	r3, r3, #1
 832 003a 43F00103 		orr	r3, r3, #1
 833 003e A362     		str	r3, [r4, #40]
 834 0040 04E0     		b	.L99
 835              	.LVL56:
 836              	.L98:
 650:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                         HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 651:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                         HAL_ADC_STATE_READY);
 652:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
 653:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
 654:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   else
 655:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {
 656:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Update ADC state machine to error */
 657:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 837              		.loc 1 657 0
 838 0042 A36A     		ldr	r3, [r4, #40]
 839 0044 43F02003 		orr	r3, r3, #32
 840 0048 A362     		str	r3, [r4, #40]
 841              	.LVL57:
 658:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       
 659:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     tmp_hal_status = HAL_ERROR;
 842              		.loc 1 659 0
 843 004a 0120     		movs	r0, #1
 844              	.LVL58:
 845              	.L99:
ARM GAS  /var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//cc05OIMQ.s 			page 28


 660:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
 661:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 662:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Process unlocked */
 663:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   __HAL_UNLOCK(hadc);
 846              		.loc 1 663 0
 847 004c 0023     		movs	r3, #0
 848 004e 84F82430 		strb	r3, [r4, #36]
 664:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 665:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Return function status */
 666:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   return tmp_hal_status;
 849              		.loc 1 666 0
 850 0052 10BD     		pop	{r4, pc}
 851              	.LVL59:
 852              	.L100:
 627:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 853              		.loc 1 627 0
 854 0054 0220     		movs	r0, #2
 855              	.LVL60:
 667:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** }
 856              		.loc 1 667 0
 857 0056 10BD     		pop	{r4, pc}
 858              		.cfi_endproc
 859              	.LFE68:
 861              		.section	.text.HAL_ADCEx_MultiModeStart_DMA,"ax",%progbits
 862              		.align	1
 863              		.global	HAL_ADCEx_MultiModeStart_DMA
 864              		.thumb
 865              		.thumb_func
 867              	HAL_ADCEx_MultiModeStart_DMA:
 868              	.LFB69:
 668:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 669:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** #if defined (STM32F101xG) || defined (STM32F103x6) || defined (STM32F103xB) || defined (STM32F105xC
 670:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** /**
 671:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @brief  Enables ADC, starts conversion of regular group and transfers result
 672:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         through DMA.
 673:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         Multimode must have been previously configured using 
 674:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         HAL_ADCEx_MultiModeConfigChannel() function.
 675:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         Interruptions enabled in this function:
 676:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *          - DMA transfer complete
 677:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *          - DMA half transfer
 678:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         Each of these interruptions has its dedicated callback function.
 679:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @note:  On STM32F1 devices, ADC slave regular group must be configured 
 680:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         with conversion trigger ADC_SOFTWARE_START.
 681:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @note:  ADC slave can be enabled preliminarily using single-mode  
 682:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         HAL_ADC_Start() function.
 683:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @param  hadc: ADC handle of ADC master (handle of ADC slave must not be used)
 684:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @param  pData: The destination Buffer address.
 685:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @param  Length: The length of data to be transferred from ADC peripheral to memory.
 686:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @retval None
 687:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   */
 688:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t L
 689:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** {
 869              		.loc 1 689 0
 870              		.cfi_startproc
 871              		@ args = 0, pretend = 0, frame = 48
 872              		@ frame_needed = 0, uses_anonymous_args = 0
 873              	.LVL61:
ARM GAS  /var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//cc05OIMQ.s 			page 29


 874 0000 2DE9D041 		push	{r4, r6, r7, r8, lr}
 875              	.LCFI6:
 876              		.cfi_def_cfa_offset 20
 877              		.cfi_offset 4, -20
 878              		.cfi_offset 6, -16
 879              		.cfi_offset 7, -12
 880              		.cfi_offset 8, -8
 881              		.cfi_offset 14, -4
 690:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 691:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   ADC_HandleTypeDef tmphadcSlave;
 692:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 693:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Check the parameters */
 694:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
 695:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 696:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 697:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Process locked */
 698:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 882              		.loc 1 698 0
 883 0004 90F82430 		ldrb	r3, [r0, #36]	@ zero_extendqisi2
 884 0008 012B     		cmp	r3, #1
 689:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** {
 885              		.loc 1 689 0
 886 000a 8DB0     		sub	sp, sp, #52
 887              	.LCFI7:
 888              		.cfi_def_cfa_offset 72
 689:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** {
 889              		.loc 1 689 0
 890 000c 0446     		mov	r4, r0
 891 000e 8846     		mov	r8, r1
 892 0010 1746     		mov	r7, r2
 893              		.loc 1 698 0
 894 0012 56D0     		beq	.L107
 699:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 700:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Set a temporary handle of the ADC slave associated to the ADC master     */
 701:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 895              		.loc 1 701 0 discriminator 2
 896 0014 2D4A     		ldr	r2, .L112
 897              	.LVL62:
 898 0016 0092     		str	r2, [sp]
 702:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 703:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* On STM32F1 devices, ADC slave regular group must be configured with      */
 704:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* conversion trigger ADC_SOFTWARE_START.                                   */
 705:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Note: External trigger of ADC slave must be enabled, it is already done  */
 706:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*       into function "HAL_ADC_Init()".                                    */
 707:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   if ((tmphadcSlave.Instance == NULL)                 ||
 708:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       (! ADC_IS_SOFTWARE_START_REGULAR(&tmphadcSlave))  )
 899              		.loc 1 708 0 discriminator 2
 900 0018 9268     		ldr	r2, [r2, #8]
 901 001a 02F46022 		and	r2, r2, #917504
 698:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 902              		.loc 1 698 0 discriminator 2
 903 001e 0123     		movs	r3, #1
 707:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   if ((tmphadcSlave.Instance == NULL)                 ||
 904              		.loc 1 707 0 discriminator 2
 905 0020 B2F5602F 		cmp	r2, #917504
 698:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 906              		.loc 1 698 0 discriminator 2
ARM GAS  /var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//cc05OIMQ.s 			page 30


 907 0024 80F82430 		strb	r3, [r0, #36]
 707:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   if ((tmphadcSlave.Instance == NULL)                 ||
 908              		.loc 1 707 0 discriminator 2
 909 0028 08D0     		beq	.L103
 709:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {
 710:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Update ADC state machine to error */
 711:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 910              		.loc 1 711 0
 911 002a 826A     		ldr	r2, [r0, #40]
 912 002c 42F02002 		orr	r2, r2, #32
 913 0030 8262     		str	r2, [r0, #40]
 712:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 713:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Process unlocked */
 714:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     __HAL_UNLOCK(hadc);
 914              		.loc 1 714 0
 915 0032 0022     		movs	r2, #0
 916 0034 80F82420 		strb	r2, [r0, #36]
 715:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 716:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     return HAL_ERROR;
 917              		.loc 1 716 0
 918 0038 1846     		mov	r0, r3
 919              	.LVL63:
 920 003a 43E0     		b	.L102
 921              	.LVL64:
 922              	.L103:
 717:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
 718:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 719:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Enable the ADC peripherals: master and slave (in case if not already     */
 720:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* enabled previously)                                                      */
 721:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   tmp_hal_status = ADC_Enable(hadc);
 923              		.loc 1 721 0
 924 003c FFF7FEFF 		bl	ADC_Enable
 925              	.LVL65:
 722:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   if (tmp_hal_status == HAL_OK)
 926              		.loc 1 722 0
 927 0040 0028     		cmp	r0, #0
 928 0042 3AD1     		bne	.L104
 723:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {
 724:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     tmp_hal_status = ADC_Enable(&tmphadcSlave);
 929              		.loc 1 724 0
 930 0044 6846     		mov	r0, sp
 931              	.LVL66:
 932 0046 FFF7FEFF 		bl	ADC_Enable
 933              	.LVL67:
 725:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
 726:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 727:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Start conversion if all ADCs of multimode are effectively enabled */
 728:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   if (tmp_hal_status == HAL_OK)
 934              		.loc 1 728 0
 935 004a 0028     		cmp	r0, #0
 936 004c 35D1     		bne	.L104
 729:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {
 730:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Set ADC state (ADC master)                                             */
 731:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* - Clear state bitfield related to regular group conversion results     */
 732:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* - Set state bitfield related to regular operation                      */
 733:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     ADC_STATE_CLR_SET(hadc->State,
 937              		.loc 1 733 0
ARM GAS  /var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//cc05OIMQ.s 			page 31


 938 004e A36A     		ldr	r3, [r4, #40]
 939 0050 1F48     		ldr	r0, .L112+4
 940              	.LVL68:
 734:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                       HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_MULTIMODE_SLAVE,
 735:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                       HAL_ADC_STATE_REG_BUSY);
 736:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       
 737:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* If conversions on group regular are also triggering group injected,    */
 738:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* update ADC state.                                                      */
 739:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 941              		.loc 1 739 0
 942 0052 2168     		ldr	r1, [r4]
 733:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     ADC_STATE_CLR_SET(hadc->State,
 943              		.loc 1 733 0
 944 0054 1840     		ands	r0, r0, r3
 945 0056 40F48070 		orr	r0, r0, #256
 946 005a A062     		str	r0, [r4, #40]
 947              		.loc 1 739 0
 948 005c 4B68     		ldr	r3, [r1, #4]
 949 005e 5B05     		lsls	r3, r3, #21
 950 0060 05D5     		bpl	.L105
 740:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
 741:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 951              		.loc 1 741 0
 952 0062 A36A     		ldr	r3, [r4, #40]
 953 0064 23F44053 		bic	r3, r3, #12288
 954 0068 43F48053 		orr	r3, r3, #4096
 955 006c A362     		str	r3, [r4, #40]
 956              	.L105:
 742:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
 743:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 744:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Process unlocked */
 745:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Unlock before starting ADC conversions: in case of potential           */
 746:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* interruption, to let the process to ADC IRQ Handler.                   */
 747:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     __HAL_UNLOCK(hadc);
 748:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 749:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Set ADC error code to none */
 750:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     ADC_CLEAR_ERRORCODE(hadc);
 751:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 752:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 753:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Set the DMA transfer complete callback */
 754:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 957              		.loc 1 754 0
 958 006e 206A     		ldr	r0, [r4, #32]
 959 0070 184B     		ldr	r3, .L112+8
 747:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     __HAL_UNLOCK(hadc);
 960              		.loc 1 747 0
 961 0072 0026     		movs	r6, #0
 750:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     ADC_CLEAR_ERRORCODE(hadc);
 962              		.loc 1 750 0
 963 0074 E662     		str	r6, [r4, #44]
 747:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     __HAL_UNLOCK(hadc);
 964              		.loc 1 747 0
 965 0076 84F82460 		strb	r6, [r4, #36]
 966              		.loc 1 754 0
 967 007a 8362     		str	r3, [r0, #40]
 755:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****        
 756:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Set the DMA half transfer complete callback */
ARM GAS  /var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//cc05OIMQ.s 			page 32


 757:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 968              		.loc 1 757 0
 969 007c 164B     		ldr	r3, .L112+12
 970 007e C362     		str	r3, [r0, #44]
 758:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 759:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Set the DMA error callback */
 760:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 971              		.loc 1 760 0
 972 0080 164B     		ldr	r3, .L112+16
 973 0082 0363     		str	r3, [r0, #48]
 761:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 762:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 763:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
 764:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* start (in case of SW start):                                           */
 765:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 766:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Clear regular group conversion flag and overrun flag */
 767:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* (To ensure of no unknown state from potential previous ADC operations) */
 768:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 974              		.loc 1 768 0
 975 0084 6FF00203 		mvn	r3, #2
 976 0088 0B60     		str	r3, [r1]
 769:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 770:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Enable ADC DMA mode of ADC master */
 771:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 977              		.loc 1 771 0
 978 008a 8B68     		ldr	r3, [r1, #8]
 979 008c 43F48073 		orr	r3, r3, #256
 980 0090 8B60     		str	r3, [r1, #8]
 772:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 773:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Start the DMA channel */
 774:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 981              		.loc 1 774 0
 982 0092 4246     		mov	r2, r8
 983 0094 3B46     		mov	r3, r7
 984 0096 4C31     		adds	r1, r1, #76
 985 0098 FFF7FEFF 		bl	HAL_DMA_Start_IT
 986              	.LVL69:
 775:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 776:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Start conversion of regular group if software start has been selected. */
 777:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* If external trigger has been selected, conversion will start at next   */
 778:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* trigger event.                                                         */
 779:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Note: Alternate trigger for single conversion could be to force an     */
 780:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
 781:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 987              		.loc 1 781 0
 988 009c 2368     		ldr	r3, [r4]
 989 009e 9A68     		ldr	r2, [r3, #8]
 990 00a0 02F46022 		and	r2, r2, #917504
 991 00a4 B2F5602F 		cmp	r2, #917504
 782:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
 783:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       /* Start ADC conversion on regular group with SW start */
 784:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 992              		.loc 1 784 0
 993 00a8 9A68     		ldr	r2, [r3, #8]
 994 00aa 0CBF     		ite	eq
 995 00ac 42F4A002 		orreq	r2, r2, #5242880
 785:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
ARM GAS  /var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//cc05OIMQ.s 			page 33


 786:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     else
 787:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
 788:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       /* Start ADC conversion on regular group with external trigger */
 789:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 996              		.loc 1 789 0
 997 00b0 42F48012 		orrne	r2, r2, #1048576
 998 00b4 9A60     		str	r2, [r3, #8]
 999 00b6 3046     		mov	r0, r6
 1000 00b8 04E0     		b	.L102
 1001              	.LVL70:
 1002              	.L104:
 790:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
 791:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
 792:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   else
 793:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {
 794:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Process unlocked */
 795:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     __HAL_UNLOCK(hadc);
 1003              		.loc 1 795 0
 1004 00ba 0023     		movs	r3, #0
 1005 00bc 84F82430 		strb	r3, [r4, #36]
 1006 00c0 00E0     		b	.L102
 1007              	.LVL71:
 1008              	.L107:
 698:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 1009              		.loc 1 698 0
 1010 00c2 0220     		movs	r0, #2
 1011              	.LVL72:
 1012              	.L102:
 796:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
 797:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 798:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Return function status */
 799:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   return tmp_hal_status;
 800:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** }
 1013              		.loc 1 800 0
 1014 00c4 0DB0     		add	sp, sp, #52
 1015              		@ sp needed
 1016 00c6 BDE8D081 		pop	{r4, r6, r7, r8, pc}
 1017              	.LVL73:
 1018              	.L113:
 1019 00ca 00BF     		.align	2
 1020              	.L112:
 1021 00cc 00280140 		.word	1073817600
 1022 00d0 FEFCEFFF 		.word	-1049346
 1023 00d4 00000000 		.word	ADC_DMAConvCplt
 1024 00d8 00000000 		.word	ADC_DMAHalfConvCplt
 1025 00dc 00000000 		.word	ADC_DMAError
 1026              		.cfi_endproc
 1027              	.LFE69:
 1029              		.section	.text.HAL_ADCEx_MultiModeStop_DMA,"ax",%progbits
 1030              		.align	1
 1031              		.global	HAL_ADCEx_MultiModeStop_DMA
 1032              		.thumb
 1033              		.thumb_func
 1035              	HAL_ADCEx_MultiModeStop_DMA:
 1036              	.LFB70:
 801:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 802:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** /**
ARM GAS  /var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//cc05OIMQ.s 			page 34


 803:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @brief  Stop ADC conversion of regular group (and injected channels in 
 804:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         case of auto_injection mode), disable ADC DMA transfer, disable 
 805:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         ADC peripheral.
 806:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @note   Multimode is kept enabled after this function. To disable multimode 
 807:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         (set with HAL_ADCEx_MultiModeConfigChannel(), ADC must be 
 808:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         reinitialized using HAL_ADC_Init() or HAL_ADC_ReInit().
 809:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @note   In case of DMA configured in circular mode, function 
 810:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         HAL_ADC_Stop_DMA must be called after this function with handle of
 811:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         ADC slave, to properly disable the DMA channel.
 812:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @param  hadc: ADC handle of ADC master (handle of ADC slave must not be used)
 813:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @retval None
 814:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   */
 815:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_MultiModeStop_DMA(ADC_HandleTypeDef* hadc)
 816:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** {
 1037              		.loc 1 816 0
 1038              		.cfi_startproc
 1039              		@ args = 0, pretend = 0, frame = 48
 1040              		@ frame_needed = 0, uses_anonymous_args = 0
 1041              	.LVL74:
 1042 0000 70B5     		push	{r4, r5, r6, lr}
 1043              	.LCFI8:
 1044              		.cfi_def_cfa_offset 16
 1045              		.cfi_offset 4, -16
 1046              		.cfi_offset 5, -12
 1047              		.cfi_offset 6, -8
 1048              		.cfi_offset 14, -4
 817:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 818:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   ADC_HandleTypeDef tmphadcSlave;
 819:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 820:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Check the parameters */
 821:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
 822:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 823:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Process locked */
 824:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 1049              		.loc 1 824 0
 1050 0002 90F82430 		ldrb	r3, [r0, #36]	@ zero_extendqisi2
 1051 0006 012B     		cmp	r3, #1
 816:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** {
 1052              		.loc 1 816 0
 1053 0008 8CB0     		sub	sp, sp, #48
 1054              	.LCFI9:
 1055              		.cfi_def_cfa_offset 64
 816:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** {
 1056              		.loc 1 816 0
 1057 000a 0446     		mov	r4, r0
 1058              		.loc 1 824 0
 1059 000c 34D0     		beq	.L119
 1060              		.loc 1 824 0 is_stmt 0 discriminator 2
 1061 000e 0126     		movs	r6, #1
 1062 0010 80F82460 		strb	r6, [r0, #36]
 825:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 826:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****  
 827:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Stop potential conversion on going, on regular and injected groups */
 828:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Disable ADC master peripheral */
 829:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 1063              		.loc 1 829 0 is_stmt 1 discriminator 2
 1064 0014 FFF7FEFF 		bl	ADC_ConversionStop_Disable
ARM GAS  /var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//cc05OIMQ.s 			page 35


 1065              	.LVL75:
 830:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 831:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Check if ADC is effectively disabled */
 832:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   if (tmp_hal_status == HAL_OK)
 1066              		.loc 1 832 0 discriminator 2
 1067 0018 0546     		mov	r5, r0
 1068 001a 40BB     		cbnz	r0, .L116
 833:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {
 834:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Set a temporary handle of the ADC slave associated to the ADC master   */
 835:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 1069              		.loc 1 835 0
 1070 001c 0CA8     		add	r0, sp, #48
 1071              	.LVL76:
 1072 001e 184B     		ldr	r3, .L121
 1073 0020 40F8303D 		str	r3, [r0, #-48]!
 836:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 837:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     if (tmphadcSlave.Instance == NULL)
 838:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
 839:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       /* Update ADC state machine to error */
 840:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 841:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       
 842:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       /* Process unlocked */
 843:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       __HAL_UNLOCK(hadc);
 844:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       
 845:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       return HAL_ERROR;
 846:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
 847:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     else
 848:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
 849:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       /* Disable ADC slave peripheral */
 850:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       tmp_hal_status = ADC_ConversionStop_Disable(&tmphadcSlave);
 1074              		.loc 1 850 0
 1075 0024 6846     		mov	r0, sp
 1076 0026 FFF7FEFF 		bl	ADC_ConversionStop_Disable
 1077              	.LVL77:
 851:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       
 852:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       /* Check if ADC is effectively disabled */
 853:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       if (tmp_hal_status != HAL_OK)
 1078              		.loc 1 853 0
 1079 002a 38B1     		cbz	r0, .L117
 854:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       {
 855:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         /* Update ADC state machine to error */
 856:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 1080              		.loc 1 856 0
 1081 002c A36A     		ldr	r3, [r4, #40]
 857:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         
 858:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         /* Process unlocked */
 859:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         __HAL_UNLOCK(hadc);
 1082              		.loc 1 859 0
 1083 002e 84F82450 		strb	r5, [r4, #36]
 856:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 1084              		.loc 1 856 0
 1085 0032 43F01003 		orr	r3, r3, #16
 1086 0036 A362     		str	r3, [r4, #40]
 860:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         
 861:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         return HAL_ERROR;
 1087              		.loc 1 861 0
 1088 0038 3046     		mov	r0, r6
ARM GAS  /var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//cc05OIMQ.s 			page 36


 1089              	.LVL78:
 1090 003a 1EE0     		b	.L115
 1091              	.LVL79:
 1092              	.L117:
 862:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       }
 863:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
 864:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 865:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Disable ADC DMA mode */
 866:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 1093              		.loc 1 866 0
 1094 003c 2368     		ldr	r3, [r4]
 867:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 868:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Reset configuration of ADC DMA continuous request for dual mode */
 869:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     CLEAR_BIT(hadc->Instance->CR1, ADC_CR1_DUALMOD);
 870:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         
 871:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Disable the DMA channel (in case of DMA in circular mode or stop while */
 872:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* while DMA transfer is on going)                                        */
 873:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 1095              		.loc 1 873 0
 1096 003e 206A     		ldr	r0, [r4, #32]
 1097              	.LVL80:
 866:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 1098              		.loc 1 866 0
 1099 0040 9A68     		ldr	r2, [r3, #8]
 1100 0042 22F48072 		bic	r2, r2, #256
 1101 0046 9A60     		str	r2, [r3, #8]
 869:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     CLEAR_BIT(hadc->Instance->CR1, ADC_CR1_DUALMOD);
 1102              		.loc 1 869 0
 1103 0048 5A68     		ldr	r2, [r3, #4]
 1104 004a 22F47022 		bic	r2, r2, #983040
 1105 004e 5A60     		str	r2, [r3, #4]
 1106              		.loc 1 873 0
 1107 0050 FFF7FEFF 		bl	HAL_DMA_Abort
 1108              	.LVL81:
 874:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 875:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 876:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Check if DMA channel effectively disabled */
 877:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     if (tmp_hal_status == HAL_OK)
 878:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
 879:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       /* Change ADC state (ADC master) */
 880:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       ADC_STATE_CLR_SET(hadc->State,
 1109              		.loc 1 880 0
 1110 0054 A36A     		ldr	r3, [r4, #40]
 877:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     if (tmp_hal_status == HAL_OK)
 1111              		.loc 1 877 0
 1112 0056 0546     		mov	r5, r0
 1113 0058 30B9     		cbnz	r0, .L118
 1114              		.loc 1 880 0
 1115 005a 23F48853 		bic	r3, r3, #4352
 1116 005e 23F00103 		bic	r3, r3, #1
 1117 0062 43F00103 		orr	r3, r3, #1
 1118 0066 01E0     		b	.L120
 1119              	.L118:
 881:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                         HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 882:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                         HAL_ADC_STATE_READY);
 883:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
 884:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     else
ARM GAS  /var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//cc05OIMQ.s 			page 37


 885:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
 886:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       /* Update ADC state machine to error */
 887:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);    
 1120              		.loc 1 887 0
 1121 0068 43F04003 		orr	r3, r3, #64
 1122              	.L120:
 1123 006c A362     		str	r3, [r4, #40]
 1124              	.L116:
 1125              	.LVL82:
 888:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
 889:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
 890:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 891:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Process unlocked */
 892:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   __HAL_UNLOCK(hadc);
 1126              		.loc 1 892 0
 1127 006e 0023     		movs	r3, #0
 1128 0070 84F82430 		strb	r3, [r4, #36]
 893:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 894:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Return function status */
 895:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   return tmp_hal_status;
 1129              		.loc 1 895 0
 1130 0074 2846     		mov	r0, r5
 1131 0076 00E0     		b	.L115
 1132              	.LVL83:
 1133              	.L119:
 824:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 1134              		.loc 1 824 0
 1135 0078 0220     		movs	r0, #2
 1136              	.LVL84:
 1137              	.L115:
 896:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** }
 1138              		.loc 1 896 0
 1139 007a 0CB0     		add	sp, sp, #48
 1140              		@ sp needed
 1141 007c 70BD     		pop	{r4, r5, r6, pc}
 1142              	.LVL85:
 1143              	.L122:
 1144 007e 00BF     		.align	2
 1145              	.L121:
 1146 0080 00280140 		.word	1073817600
 1147              		.cfi_endproc
 1148              	.LFE70:
 1150              		.section	.text.HAL_ADCEx_InjectedGetValue,"ax",%progbits
 1151              		.align	1
 1152              		.global	HAL_ADCEx_InjectedGetValue
 1153              		.thumb
 1154              		.thumb_func
 1156              	HAL_ADCEx_InjectedGetValue:
 1157              	.LFB71:
 897:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** #endif /* STM32F101xG || defined STM32F103x6 || defined STM32F103xB || defined STM32F105xC || defin
 898:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 899:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** /**
 900:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @brief  Get ADC injected group conversion result.
 901:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @note   Reading register JDRx automatically clears ADC flag JEOC
 902:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         (ADC group injected end of unitary conversion).
 903:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @note   This function does not clear ADC flag JEOS 
 904:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         (ADC group injected end of sequence conversion)
ARM GAS  /var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//cc05OIMQ.s 			page 38


 905:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         Occurrence of flag JEOS rising:
 906:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *          - If sequencer is composed of 1 rank, flag JEOS is equivalent
 907:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *            to flag JEOC.
 908:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *          - If sequencer is composed of several ranks, during the scan
 909:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *            sequence flag JEOC only is raised, at the end of the scan sequence
 910:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *            both flags JEOC and EOS are raised.
 911:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         Flag JEOS must not be cleared by this function because
 912:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         it would not be compliant with low power features
 913:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         (feature low power auto-wait, not available on all STM32 families).
 914:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         To clear this flag, either use function: 
 915:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         in programming model IT: @ref HAL_ADC_IRQHandler(), in programming
 916:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         model polling: @ref HAL_ADCEx_InjectedPollForConversion() 
 917:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_JEOS).
 918:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @param  hadc: ADC handle
 919:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @param  InjectedRank: the converted ADC injected rank.
 920:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *          This parameter can be one of the following values:
 921:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *            @arg ADC_INJECTED_RANK_1: Injected Channel1 selected
 922:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *            @arg ADC_INJECTED_RANK_2: Injected Channel2 selected
 923:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *            @arg ADC_INJECTED_RANK_3: Injected Channel3 selected
 924:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *            @arg ADC_INJECTED_RANK_4: Injected Channel4 selected
 925:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @retval ADC group injected conversion data
 926:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   */
 927:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef* hadc, uint32_t InjectedRank)
 928:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** {
 1158              		.loc 1 928 0
 1159              		.cfi_startproc
 1160              		@ args = 0, pretend = 0, frame = 0
 1161              		@ frame_needed = 0, uses_anonymous_args = 0
 1162              		@ link register save eliminated.
 1163              	.LVL86:
 929:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   uint32_t tmp_jdr = 0;
 930:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 931:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Check the parameters */
 932:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 933:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   assert_param(IS_ADC_INJECTED_RANK(InjectedRank));
 934:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 935:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Get ADC converted value */ 
 936:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   switch(InjectedRank)
 1164              		.loc 1 936 0
 1165 0000 0329     		cmp	r1, #3
 1166 0002 0368     		ldr	r3, [r0]
 1167 0004 07D0     		beq	.L125
 1168 0006 0429     		cmp	r1, #4
 1169 0008 03D0     		beq	.L126
 1170 000a 0229     		cmp	r1, #2
 1171 000c 05D1     		bne	.L129
 937:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {  
 938:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     case ADC_INJECTED_RANK_4: 
 939:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       tmp_jdr = hadc->Instance->JDR4;
 940:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       break;
 941:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     case ADC_INJECTED_RANK_3: 
 942:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       tmp_jdr = hadc->Instance->JDR3;
 943:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       break;
 944:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     case ADC_INJECTED_RANK_2: 
 945:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       tmp_jdr = hadc->Instance->JDR2;
 1172              		.loc 1 945 0
 1173 000e 186C     		ldr	r0, [r3, #64]
ARM GAS  /var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//cc05OIMQ.s 			page 39


 1174              	.LVL87:
 946:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       break;
 1175              		.loc 1 946 0
 1176 0010 7047     		bx	lr
 1177              	.LVL88:
 1178              	.L126:
 939:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       tmp_jdr = hadc->Instance->JDR4;
 1179              		.loc 1 939 0
 1180 0012 986C     		ldr	r0, [r3, #72]
 1181              	.LVL89:
 940:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       break;
 1182              		.loc 1 940 0
 1183 0014 7047     		bx	lr
 1184              	.LVL90:
 1185              	.L125:
 942:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       tmp_jdr = hadc->Instance->JDR3;
 1186              		.loc 1 942 0
 1187 0016 586C     		ldr	r0, [r3, #68]
 1188              	.LVL91:
 943:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       break;
 1189              		.loc 1 943 0
 1190 0018 7047     		bx	lr
 1191              	.LVL92:
 1192              	.L129:
 947:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     case ADC_INJECTED_RANK_1:
 948:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     default:
 949:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       tmp_jdr = hadc->Instance->JDR1;
 1193              		.loc 1 949 0
 1194 001a D86B     		ldr	r0, [r3, #60]
 1195              	.LVL93:
 950:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       break;
 951:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
 952:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 953:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Return ADC converted value */ 
 954:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   return tmp_jdr;
 955:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** }
 1196              		.loc 1 955 0
 1197 001c 7047     		bx	lr
 1198              		.cfi_endproc
 1199              	.LFE71:
 1201              		.section	.text.HAL_ADCEx_MultiModeGetValue,"ax",%progbits
 1202              		.align	1
 1203              		.global	HAL_ADCEx_MultiModeGetValue
 1204              		.thumb
 1205              		.thumb_func
 1207              	HAL_ADCEx_MultiModeGetValue:
 1208              	.LFB72:
 956:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 957:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** #if defined (STM32F101xG) || defined (STM32F103x6) || defined (STM32F103xB) || defined (STM32F105xC
 958:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** /**
 959:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @brief  Returns the last ADC Master&Slave regular conversions results data
 960:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         in the selected multi mode.
 961:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @param  hadc: ADC handle of ADC master (handle of ADC slave must not be used)
 962:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @retval The converted data value.
 963:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   */
 964:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** uint32_t HAL_ADCEx_MultiModeGetValue(ADC_HandleTypeDef* hadc)
 965:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** {
ARM GAS  /var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//cc05OIMQ.s 			page 40


 1209              		.loc 1 965 0
 1210              		.cfi_startproc
 1211              		@ args = 0, pretend = 0, frame = 0
 1212              		@ frame_needed = 0, uses_anonymous_args = 0
 1213              		@ link register save eliminated.
 1214              	.LVL94:
 966:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   uint32_t tmpDR = 0;
 967:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 968:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Check the parameters */
 969:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
 970:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 971:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Check the parameters */
 972:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 973:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 974:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Note: EOC flag is not cleared here by software because automatically     */
 975:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*       cleared by hardware when reading register DR.                      */
 976:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 977:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* On STM32F1 devices, ADC1 data register DR contains ADC2 conversions      */
 978:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* only if ADC1 DMA mode is enabled.                                        */
 979:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   tmpDR = hadc->Instance->DR;
 1215              		.loc 1 979 0
 1216 0000 0368     		ldr	r3, [r0]
 1217 0002 D86C     		ldr	r0, [r3, #76]
 1218              	.LVL95:
 980:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 981:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   if (HAL_IS_BIT_CLR(ADC1->CR2, ADC_CR2_DMA))
 1219              		.loc 1 981 0
 1220 0004 044B     		ldr	r3, .L132
 1221 0006 9B68     		ldr	r3, [r3, #8]
 1222 0008 DB05     		lsls	r3, r3, #23
 1223 000a 03D4     		bmi	.L131
 982:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {
 983:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     tmpDR |= (ADC2->DR << 16);
 1224              		.loc 1 983 0
 1225 000c 034B     		ldr	r3, .L132+4
 1226 000e DB6C     		ldr	r3, [r3, #76]
 1227 0010 40EA0340 		orr	r0, r0, r3, lsl #16
 1228              	.LVL96:
 1229              	.L131:
 984:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
 985:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 986:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Return ADC converted value */ 
 987:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   return tmpDR;
 988:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** }
 1230              		.loc 1 988 0
 1231 0014 7047     		bx	lr
 1232              	.L133:
 1233 0016 00BF     		.align	2
 1234              	.L132:
 1235 0018 00240140 		.word	1073816576
 1236 001c 00280140 		.word	1073817600
 1237              		.cfi_endproc
 1238              	.LFE72:
 1240              		.section	.text.HAL_ADCEx_InjectedConvCpltCallback,"ax",%progbits
 1241              		.align	1
 1242              		.weak	HAL_ADCEx_InjectedConvCpltCallback
 1243              		.thumb
ARM GAS  /var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//cc05OIMQ.s 			page 41


 1244              		.thumb_func
 1246              	HAL_ADCEx_InjectedConvCpltCallback:
 1247              	.LFB73:
 989:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** #endif /* STM32F101xG || defined STM32F103x6 || defined STM32F103xB || defined STM32F105xC || defin
 990:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 991:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** /**
 992:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @brief  Injected conversion complete callback in non blocking mode 
 993:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @param  hadc: ADC handle
 994:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @retval None
 995:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   */
 996:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** __weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
 997:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** {
 1248              		.loc 1 997 0
 1249              		.cfi_startproc
 1250              		@ args = 0, pretend = 0, frame = 0
 1251              		@ frame_needed = 0, uses_anonymous_args = 0
 1252              		@ link register save eliminated.
 1253              	.LVL97:
 1254 0000 7047     		bx	lr
 1255              		.cfi_endproc
 1256              	.LFE73:
 1258              		.section	.text.HAL_ADCEx_InjectedConfigChannel,"ax",%progbits
 1259              		.align	1
 1260              		.global	HAL_ADCEx_InjectedConfigChannel
 1261              		.thumb
 1262              		.thumb_func
 1264              	HAL_ADCEx_InjectedConfigChannel:
 1265              	.LFB74:
 998:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Prevent unused argument(s) compilation warning */
 999:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   UNUSED(hadc);
1000:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1001:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****             the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
1002:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   */
1003:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** }
1004:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
1005:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** /**
1006:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @}
1007:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   */
1008:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
1009:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** /** @defgroup ADCEx_Exported_Functions_Group2 Extended Peripheral Control functions
1010:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @brief    Extended Peripheral Control functions
1011:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *
1012:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** @verbatim   
1013:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****  ===============================================================================
1014:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****              ##### Peripheral Control functions #####
1015:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****  ===============================================================================  
1016:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     [..]  This section provides functions allowing to:
1017:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       (+) Configure channels on injected group
1018:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       (+) Configure multimode
1019:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
1020:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** @endverbatim
1021:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @{
1022:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   */
1023:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
1024:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** /**
1025:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @brief  Configures the ADC injected group and the selected channel to be
1026:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         linked to the injected group.
ARM GAS  /var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//cc05OIMQ.s 			page 42


1027:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @note   Possibility to update parameters on the fly:
1028:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         This function initializes injected group, following calls to this 
1029:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         function can be used to reconfigure some parameters of structure
1030:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         "ADC_InjectionConfTypeDef" on the fly, without reseting the ADC.
1031:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         The setting of these parameters is conditioned to ADC state: 
1032:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         this function must be called when ADC is not under conversion.
1033:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @param  hadc: ADC handle
1034:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @param  sConfigInjected: Structure of ADC injected group and ADC channel for
1035:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         injected group.
1036:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @retval None
1037:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   */
1038:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef
1039:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** {
 1266              		.loc 1 1039 0
 1267              		.cfi_startproc
 1268              		@ args = 0, pretend = 0, frame = 8
 1269              		@ frame_needed = 0, uses_anonymous_args = 0
 1270              	.LVL98:
 1271              		.loc 1 1039 0
 1272 0000 2DE9F347 		push	{r0, r1, r4, r5, r6, r7, r8, r9, r10, lr}
 1273              	.LCFI10:
 1274              		.cfi_def_cfa_offset 40
 1275              		.cfi_offset 0, -40
 1276              		.cfi_offset 1, -36
 1277              		.cfi_offset 4, -32
 1278              		.cfi_offset 5, -28
 1279              		.cfi_offset 6, -24
 1280              		.cfi_offset 7, -20
 1281              		.cfi_offset 8, -16
 1282              		.cfi_offset 9, -12
 1283              		.cfi_offset 10, -8
 1284              		.cfi_offset 14, -4
1040:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
1041:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   __IO uint32_t wait_loop_index = 0;
 1285              		.loc 1 1041 0
 1286 0004 0023     		movs	r3, #0
 1287 0006 0193     		str	r3, [sp, #4]
1042:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
1043:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Check the parameters */
1044:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1045:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   assert_param(IS_ADC_CHANNEL(sConfigInjected->InjectedChannel));
1046:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   assert_param(IS_ADC_SAMPLE_TIME(sConfigInjected->InjectedSamplingTime));
1047:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->AutoInjectedConv));
1048:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   assert_param(IS_ADC_EXTTRIGINJEC(sConfigInjected->ExternalTrigInjecConv));
1049:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   assert_param(IS_ADC_RANGE(sConfigInjected->InjectedOffset));
1050:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
1051:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
1052:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {
1053:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     assert_param(IS_ADC_INJECTED_RANK(sConfigInjected->InjectedRank));
1054:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     assert_param(IS_ADC_INJECTED_NB_CONV(sConfigInjected->InjectedNbrOfConversion));
1055:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->InjectedDiscontinuousConvMode));
1056:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
1057:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
1058:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Process locked */
1059:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 1288              		.loc 1 1059 0
 1289 0008 90F82430 		ldrb	r3, [r0, #36]	@ zero_extendqisi2
ARM GAS  /var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//cc05OIMQ.s 			page 43


 1290 000c 012B     		cmp	r3, #1
 1291 000e 00F01C81 		beq	.L160
1060:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
1061:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Configuration of injected group sequencer:                               */
1062:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* - if scan mode is disabled, injected channels sequence length is set to  */
1063:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*   0x00: 1 channel converted (channel on regular rank 1)                  */
1064:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*   Parameter "InjectedNbrOfConversion" is discarded.                      */
1065:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*   Note: Scan mode is present by hardware on this device and, if          */
1066:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*   disabled, discards automatically nb of conversions. Anyway, nb of      */
1067:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*   conversions is forced to 0x00 for alignment over all STM32 devices.    */
1068:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* - if scan mode is enabled, injected channels sequence length is set to   */
1069:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*   parameter "InjectedNbrOfConversion".                                   */
1070:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 1292              		.loc 1 1070 0 discriminator 2
 1293 0012 8668     		ldr	r6, [r0, #8]
 1294 0014 4D68     		ldr	r5, [r1, #4]
 1295 0016 0368     		ldr	r3, [r0]
 1296 0018 0A68     		ldr	r2, [r1]
1059:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 1297              		.loc 1 1059 0 discriminator 2
 1298 001a 0124     		movs	r4, #1
 1299 001c 80F82440 		strb	r4, [r0, #36]
 1300              		.loc 1 1070 0 discriminator 2
 1301 0020 B6B9     		cbnz	r6, .L137
1071:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {
1072:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 1302              		.loc 1 1072 0
 1303 0022 A542     		cmp	r5, r4
 1304 0024 0FD1     		bne	.L138
1073:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
1074:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       /* Clear the old SQx bits for all injected ranks */
1075:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       MODIFY_REG(hadc->Instance->JSQR                             ,
 1305              		.loc 1 1075 0
 1306 0026 9C6B     		ldr	r4, [r3, #56]
 1307              	.LVL99:
 1308              	.LBB20:
 1309              	.LBB21:
 1310              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V4.30
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     20. October 2015
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:Drivers/CMSIS/Include/cmsis_gcc.h **** 
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****    All rights reserved.
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****      specific prior written permission.
ARM GAS  /var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//cc05OIMQ.s 			page 44


  20:Drivers/CMSIS/Include/cmsis_gcc.h ****    *
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:Drivers/CMSIS/Include/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:Drivers/CMSIS/Include/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:Drivers/CMSIS/Include/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:Drivers/CMSIS/Include/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:Drivers/CMSIS/Include/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:Drivers/CMSIS/Include/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:Drivers/CMSIS/Include/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:Drivers/CMSIS/Include/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:Drivers/CMSIS/Include/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  36:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined ( __GNUC__ )
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  41:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  44:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  47:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  49:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
  51:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  53:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  54:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  55:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  57:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  59:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  60:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  62:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  66:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  67:Drivers/CMSIS/Include/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  72:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  73:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  74:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  75:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
ARM GAS  /var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//cc05OIMQ.s 			page 45


  77:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  78:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  80:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  81:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
  83:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  85:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  87:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  88:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  89:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  93:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  95:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
  97:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  98:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  99:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 100:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 101:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 102:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 105:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 106:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 108:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 109:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 110:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 111:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 114:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 115:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 116:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 118:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 123:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 124:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 125:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 126:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 127:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 128:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 129:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 132:Drivers/CMSIS/Include/cmsis_gcc.h ****     \return               xPSR Register value
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//cc05OIMQ.s 			page 46


 134:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 137:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 142:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 143:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 145:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 148:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 149:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 150:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 151:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 154:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 155:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 163:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 164:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 169:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 170:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 171:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 172:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 175:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 178:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 183:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 184:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 186:Drivers/CMSIS/Include/cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 187:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 190:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
ARM GAS  /var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//cc05OIMQ.s 			page 47


 191:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 196:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 197:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 198:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 200:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 201:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 204:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 207:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 210:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 211:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 213:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 215:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 222:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 223:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 224:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 226:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)
 227:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 228:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 231:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 232:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 234:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 235:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 236:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
 238:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 240:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 241:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 244:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 245:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//cc05OIMQ.s 			page 48


 248:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 250:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 254:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 255:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 256:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 257:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 258:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 259:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 261:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 264:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 265:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 266:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 267:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 268:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 269:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 270:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 272:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 273:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t value)
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (value) : "memory");
 277:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 278:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 279:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 281:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 283:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 284:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 288:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 291:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 296:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 298:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 299:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 300:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 301:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M >= 0x03U) */
ARM GAS  /var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//cc05OIMQ.s 			page 49


 305:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 306:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 307:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U)
 308:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 311:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 312:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FPSCR(void)
 315:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 316:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 317:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 320:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 324:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(0);
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 329:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 332:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 338:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 339:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc");
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 342:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 343:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 344:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 345:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U) */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 348:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 349:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 350:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 351:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 352:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 353:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 354:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 355:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 358:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 361:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
ARM GAS  /var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//cc05OIMQ.s 			page 50


 362:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 363:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 368:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 369:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("nop");
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 378:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 379:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 381:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 384:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfi");
 386:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 387:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 388:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 389:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 392:Drivers/CMSIS/Include/cmsis_gcc.h ****     a low-power state until one of a number of events occurs.
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 396:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfe");
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 398:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 399:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 400:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 403:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 405:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("sev");
 407:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 408:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 409:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 410:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 416:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 417:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
ARM GAS  /var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//cc05OIMQ.s 			page 51


 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 426:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 427:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 428:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 430:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 431:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 433:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 435:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 436:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
 439:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 440:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 441:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 442:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 444:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 445:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 446:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in integer value.
 447:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 448:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 450:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV(uint32_t value)
 451:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 452:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 455:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 456:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 457:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 458:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 459:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 460:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 461:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 462:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 463:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 464:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 465:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in two unsigned short values.
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 467:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 468:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV16(uint32_t value)
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 471:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 472:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 475:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  /var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//cc05OIMQ.s 			page 52


 476:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 478:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 479:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order in signed short value
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a signed short value with sign extension to integer.
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 482:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 483:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE int32_t __REVSH(int32_t value)
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 486:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (short)__builtin_bswap16(value);
 488:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t result;
 490:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 491:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 492:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 493:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 495:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 498:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 499:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 500:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 501:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Number of Bits to rotate
 502:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 504:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 505:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 506:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 507:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 508:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 509:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 511:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 513:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 516:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 520:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 521:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 522:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 526:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 528:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 529:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 1311              		.loc 2 531 0
ARM GAS  /var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//cc05OIMQ.s 			page 53


 1312 0028 4FF47876 		mov	r6, #992
 1313              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1314 002c 96FAA6F6 		rbit r6, r6
 1315              	@ 0 "" 2
 1316              	.LVL100:
 1317              		.thumb
 1318              	.LBE21:
 1319              	.LBE20:
 1320              		.loc 1 1075 0
 1321 0030 B6FA86F6 		clz	r6, r6
 1322              	.LVL101:
 1323 0034 06EB4606 		add	r6, r6, r6, lsl #1
 1324 0038 A40D     		lsrs	r4, r4, #22
 1325 003a 02FA06F6 		lsl	r6, r2, r6
 1326 003e A405     		lsls	r4, r4, #22
 1327 0040 3443     		orrs	r4, r4, r6
 1328 0042 9C63     		str	r4, [r3, #56]
 1329 0044 40E0     		b	.L163
 1330              	.LVL102:
 1331              	.L138:
1076:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                  ADC_JSQR_JL   |
1077:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                  ADC_JSQR_JSQ4 |
1078:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                  ADC_JSQR_JSQ3 |
1079:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                  ADC_JSQR_JSQ2 |
1080:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                  ADC_JSQR_JSQ1                                    ,
1081:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                  ADC_JSQR_RK_JL(sConfigInjected->InjectedChannel,
1082:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                                   ADC_INJECTED_RANK_1,
1083:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                                   0x01)                            );
1084:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
1085:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* If another injected rank than rank1 was intended to be set, and could  */
1086:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* not due to ScanConvMode disabled, error is reported.                   */
1087:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     else
1088:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
1089:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       /* Update ADC state machine to error */
1090:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 1332              		.loc 1 1090 0
 1333 0046 866A     		ldr	r6, [r0, #40]
 1334 0048 46F02006 		orr	r6, r6, #32
 1335 004c 8662     		str	r6, [r0, #40]
 1336              	.LVL103:
 1337 004e 3CE0     		b	.L139
 1338              	.LVL104:
 1339              	.L137:
1091:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       
1092:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       tmp_hal_status = HAL_ERROR;
1093:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
1094:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
1095:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   else
1096:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {
1097:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Since injected channels rank conv. order depends on total number of   */
1098:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* injected conversions, selected rank must be below or equal to total   */
1099:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* number of injected conversions to be updated.                         */
1100:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     if (sConfigInjected->InjectedRank <= sConfigInjected->InjectedNbrOfConversion)
 1340              		.loc 1 1100 0
 1341 0050 0C69     		ldr	r4, [r1, #16]
1101:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
1102:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       /* Clear the old SQx bits for the selected rank */
ARM GAS  /var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//cc05OIMQ.s 			page 54


1103:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       /* Set the SQx bits for the selected rank */
1104:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       MODIFY_REG(hadc->Instance->JSQR                                         ,
 1342              		.loc 1 1104 0
 1343 0052 D3F83880 		ldr	r8, [r3, #56]
1100:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     if (sConfigInjected->InjectedRank <= sConfigInjected->InjectedNbrOfConversion)
 1344              		.loc 1 1100 0
 1345 0056 A542     		cmp	r5, r4
 1346 0058 4FF47877 		mov	r7, #992
 1347 005c 05F10306 		add	r6, r5, #3
 1348 0060 24D8     		bhi	.L140
 1349              	.LVL105:
 1350              	.LBB22:
 1351              	.LBB23:
 1352              		.loc 2 531 0
 1353              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1354 0062 97FAA7F7 		rbit r7, r7
 1355              	@ 0 "" 2
 1356              	.LVL106:
 1357              		.thumb
 1358              	.LBE23:
 1359              	.LBE22:
 1360              	.LBB24:
 1361              	.LBB25:
 1362 0066 4FF4401A 		mov	r10, #3145728
 1363              	.LBE25:
 1364              	.LBE24:
 1365              		.loc 1 1104 0
 1366 006a B7FA87F7 		clz	r7, r7
 1367              	.LVL107:
 1368 006e 361B     		subs	r6, r6, r4
 1369              	.LVL108:
 1370              	.LBB27:
 1371              	.LBB26:
 1372              		.loc 2 531 0
 1373              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1374 0070 9AFAAAFA 		rbit r10, r10
 1375              	@ 0 "" 2
 1376              	.LVL109:
 1377              		.thumb
 1378              	.LBE26:
 1379              	.LBE27:
 1380              	.LBB28:
 1381              	.LBB29:
 1382 0074 4FF47879 		mov	r9, #992
 1383              	.LBE29:
 1384              	.LBE28:
 1385              		.loc 1 1104 0
 1386 0078 BAFA8AFA 		clz	r10, r10
 1387              	.LVL110:
 1388              	.LBB31:
 1389              	.LBB30:
 1390              		.loc 2 531 0
 1391              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1392 007c 99FAA9F9 		rbit r9, r9
 1393              	@ 0 "" 2
 1394              	.LVL111:
 1395              		.thumb
ARM GAS  /var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//cc05OIMQ.s 			page 55


 1396              	.LBE30:
 1397              	.LBE31:
 1398              		.loc 1 1104 0
 1399 0080 B9FA89F9 		clz	r9, r9
 1400              	.LVL112:
 1401 0084 06FB09F9 		mul	r9, r6, r9
 1402 0088 7E43     		muls	r6, r7, r6
 1403 008a 1F27     		movs	r7, #31
 1404 008c 013C     		subs	r4, r4, #1
 1405 008e 07FA06F6 		lsl	r6, r7, r6
 1406 0092 02FA09F9 		lsl	r9, r2, r9
 1407 0096 04FA0AF4 		lsl	r4, r4, r10
 1408 009a 46F44016 		orr	r6, r6, #3145728
 1409 009e 49EA0404 		orr	r4, r9, r4
 1410 00a2 28EA0606 		bic	r6, r8, r6
 1411 00a6 3443     		orrs	r4, r4, r6
 1412 00a8 9C63     		str	r4, [r3, #56]
 1413 00aa 0DE0     		b	.L163
 1414              	.LVL113:
 1415              	.L140:
 1416              	.LBB32:
 1417              	.LBB33:
 1418              		.loc 2 531 0
 1419              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1420 00ac 97FAA7F7 		rbit r7, r7
 1421              	@ 0 "" 2
 1422              	.LVL114:
 1423              		.thumb
 1424              	.LBE33:
 1425              	.LBE32:
1105:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                  
1106:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                  ADC_JSQR_JL                                               |
1107:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                  ADC_JSQR_RK_JL(ADC_JSQR_JSQ1,                         
1108:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                                   sConfigInjected->InjectedRank,         
1109:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                                   sConfigInjected->InjectedNbrOfConversion)   ,
1110:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                  
1111:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                  ADC_JSQR_JL_SHIFT(sConfigInjected->InjectedNbrOfConversion) |
1112:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                  ADC_JSQR_RK_JL(sConfigInjected->InjectedChannel,      
1113:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                                   sConfigInjected->InjectedRank,         
1114:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                                   sConfigInjected->InjectedNbrOfConversion)    );
1115:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
1116:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     else
1117:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
1118:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       /* Clear the old SQx bits for the selected rank */
1119:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       MODIFY_REG(hadc->Instance->JSQR                                       ,
 1426              		.loc 1 1119 0
 1427 00b0 361B     		subs	r6, r6, r4
 1428 00b2 B7FA87F7 		clz	r7, r7
 1429              	.LVL115:
 1430 00b6 7E43     		muls	r6, r7, r6
 1431 00b8 1F24     		movs	r4, #31
 1432 00ba 04FA06F6 		lsl	r6, r4, r6
 1433 00be 46F44016 		orr	r6, r6, #3145728
 1434 00c2 28EA0606 		bic	r6, r8, r6
 1435 00c6 9E63     		str	r6, [r3, #56]
 1436              	.LVL116:
 1437              	.L163:
ARM GAS  /var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//cc05OIMQ.s 			page 56


1040:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1438              		.loc 1 1040 0
 1439 00c8 0024     		movs	r4, #0
 1440              	.LVL117:
 1441              	.L139:
1120:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                  
1121:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                  ADC_JSQR_JL                                               |
1122:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                  ADC_JSQR_RK_JL(ADC_JSQR_JSQ1,                         
1123:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                                   sConfigInjected->InjectedRank,         
1124:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                                   sConfigInjected->InjectedNbrOfConversion) ,
1125:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                  
1126:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                  0x00000000                                                  );
1127:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
1128:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   } 
1129:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
1130:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Configuration of injected group                                          */
1131:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Parameters update conditioned to ADC state:                              */
1132:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Parameters that can be updated only when ADC is disabled:                */
1133:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*  - external trigger to start conversion                                  */
1134:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Parameters update not conditioned to ADC state:                          */
1135:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*  - Automatic injected conversion                                         */
1136:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*  - Injected discontinuous mode                                           */
1137:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Note: In case of ADC already enabled, caution to not launch an unwanted  */
1138:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*       conversion while modifying register CR2 by writing 1 to bit ADON.  */
1139:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   if (ADC_IS_ENABLE(hadc) == RESET)
 1442              		.loc 1 1139 0
 1443 00ca 9E68     		ldr	r6, [r3, #8]
 1444 00cc F607     		lsls	r6, r6, #31
 1445 00ce 0FD4     		bmi	.L141
1140:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {    
1141:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     MODIFY_REG(hadc->Instance->CR2                                           ,
 1446              		.loc 1 1141 0
 1447 00d0 604F     		ldr	r7, .L165
 1448 00d2 9E68     		ldr	r6, [r3, #8]
 1449 00d4 BB42     		cmp	r3, r7
 1450 00d6 26F4E046 		bic	r6, r6, #28672
 1451 00da 26F00106 		bic	r6, r6, #1
 1452 00de CF69     		ldr	r7, [r1, #28]
 1453 00e0 04D1     		bne	.L143
 1454              		.loc 1 1141 0 is_stmt 0 discriminator 1
 1455 00e2 B7F5C04F 		cmp	r7, #24576
 1456 00e6 08BF     		it	eq
 1457 00e8 4FF48047 		moveq	r7, #16384
 1458              	.L143:
 1459              		.loc 1 1141 0 discriminator 3
 1460 00ec 3743     		orrs	r7, r7, r6
 1461 00ee 9F60     		str	r7, [r3, #8]
 1462              	.L141:
1142:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                ADC_CR2_JEXTSEL |
1143:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                ADC_CR2_ADON                                                  ,
1144:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                ADC_CFGR_JEXTSEL(hadc, sConfigInjected->ExternalTrigInjecConv) );
1145:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
1146:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
1147:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
1148:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Configuration of injected group                                          */
1149:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*  - Automatic injected conversion                                         */
1150:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*  - Injected discontinuous mode                                           */
ARM GAS  /var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//cc05OIMQ.s 			page 57


1151:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
1152:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Automatic injected conversion can be enabled if injected group         */
1153:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* external triggers are disabled.                                        */
1154:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     if (sConfigInjected->AutoInjectedConv == ENABLE)
 1463              		.loc 1 1154 0 is_stmt 1
 1464 00f0 8E69     		ldr	r6, [r1, #24]
 1465 00f2 012E     		cmp	r6, #1
 1466 00f4 0DD1     		bne	.L144
1155:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
1156:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 1467              		.loc 1 1156 0
 1468 00f6 CF69     		ldr	r7, [r1, #28]
 1469 00f8 B7F5E04F 		cmp	r7, #28672
 1470 00fc 04D1     		bne	.L145
1157:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       {
1158:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         SET_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO);
 1471              		.loc 1 1158 0
 1472 00fe 5F68     		ldr	r7, [r3, #4]
 1473 0100 47F48067 		orr	r7, r7, #1024
 1474 0104 5F60     		str	r7, [r3, #4]
 1475 0106 04E0     		b	.L144
 1476              	.L145:
1159:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       }
1160:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       else
1161:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       {
1162:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         /* Update ADC state machine to error */
1163:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 1477              		.loc 1 1163 0
 1478 0108 846A     		ldr	r4, [r0, #40]
 1479              	.LVL118:
 1480 010a 44F02004 		orr	r4, r4, #32
 1481 010e 8462     		str	r4, [r0, #40]
 1482              	.LVL119:
1164:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         
1165:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         tmp_hal_status = HAL_ERROR;
 1483              		.loc 1 1165 0
 1484 0110 3446     		mov	r4, r6
 1485              	.LVL120:
 1486              	.L144:
1166:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       }
1167:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
1168:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
1169:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Injected discontinuous can be enabled only if auto-injected mode is    */
1170:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* disabled.                                                              */  
1171:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
 1487              		.loc 1 1171 0
 1488 0112 4F69     		ldr	r7, [r1, #20]
 1489 0114 012F     		cmp	r7, #1
 1490 0116 0AD1     		bne	.L146
1172:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
1173:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       if (sConfigInjected->AutoInjectedConv == DISABLE)
 1491              		.loc 1 1173 0
 1492 0118 26B9     		cbnz	r6, .L147
1174:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       {
1175:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         SET_BIT(hadc->Instance->CR1, ADC_CR1_JDISCEN);
 1493              		.loc 1 1175 0
 1494 011a 5E68     		ldr	r6, [r3, #4]
ARM GAS  /var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//cc05OIMQ.s 			page 58


 1495 011c 46F48056 		orr	r6, r6, #4096
 1496 0120 5E60     		str	r6, [r3, #4]
 1497 0122 04E0     		b	.L146
 1498              	.L147:
1176:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       } 
1177:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       else
1178:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       {
1179:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         /* Update ADC state machine to error */
1180:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 1499              		.loc 1 1180 0
 1500 0124 846A     		ldr	r4, [r0, #40]
 1501              	.LVL121:
 1502 0126 44F02004 		orr	r4, r4, #32
 1503 012a 8462     		str	r4, [r0, #40]
 1504              	.LVL122:
1181:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         
1182:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         tmp_hal_status = HAL_ERROR;
 1505              		.loc 1 1182 0
 1506 012c 3C46     		mov	r4, r7
 1507              	.LVL123:
 1508              	.L146:
1183:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       }
1184:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
1185:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
1186:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
1187:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* InjectedChannel sampling time configuration */
1188:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* For channels 10 to 17 */
1189:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 1509              		.loc 1 1189 0
 1510 012e 092A     		cmp	r2, #9
 1511 0130 4FF03807 		mov	r7, #56
 1512 0134 8E68     		ldr	r6, [r1, #8]
 1513 0136 1CD9     		bls	.L148
1190:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {
1191:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     MODIFY_REG(hadc->Instance->SMPR1                                                             ,
 1514              		.loc 1 1191 0
 1515 0138 D3F80C90 		ldr	r9, [r3, #12]
 1516              	.LVL124:
 1517              	.LBB34:
 1518              	.LBB35:
 1519              		.loc 2 531 0
 1520              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1521 013c 97FAA7F7 		rbit r7, r7
 1522              	@ 0 "" 2
 1523              	.LVL125:
 1524              		.thumb
 1525              	.LBE35:
 1526              	.LBE34:
 1527              	.LBB36:
 1528              	.LBB37:
 1529 0140 4FF03808 		mov	r8, #56
 1530              	.LBE37:
 1531              	.LBE36:
 1532              		.loc 1 1191 0
 1533 0144 B7FA87F7 		clz	r7, r7
 1534              	.LVL126:
 1535 0148 A2F10A0C 		sub	ip, r2, #10
ARM GAS  /var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//cc05OIMQ.s 			page 59


 1536              	.LVL127:
 1537              	.LBB39:
 1538              	.LBB38:
 1539              		.loc 2 531 0
 1540              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1541 014c 98FAA8F8 		rbit r8, r8
 1542              	@ 0 "" 2
 1543              	.LVL128:
 1544              		.thumb
 1545              	.LBE38:
 1546              	.LBE39:
 1547              		.loc 1 1191 0
 1548 0150 4FF0070A 		mov	r10, #7
 1549 0154 0CFB07F7 		mul	r7, ip, r7
 1550 0158 B8FA88F8 		clz	r8, r8
 1551              	.LVL129:
 1552 015c 0AFA07F7 		lsl	r7, r10, r7
 1553 0160 0CFB08FC 		mul	ip, ip, r8
 1554 0164 29EA0707 		bic	r7, r9, r7
 1555 0168 06FA0CF6 		lsl	r6, r6, ip
 1556 016c 3E43     		orrs	r6, r6, r7
 1557 016e DE60     		str	r6, [r3, #12]
 1558 0170 18E0     		b	.L149
 1559              	.LVL130:
 1560              	.L148:
1192:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel)                      ,
1193:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) )
1194:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
1195:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   else /* For channels 0 to 9 */
1196:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {
1197:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     MODIFY_REG(hadc->Instance->SMPR2                                                             ,
 1561              		.loc 1 1197 0
 1562 0172 D3F81080 		ldr	r8, [r3, #16]
 1563              	.LVL131:
 1564              	.LBB40:
 1565              	.LBB41:
 1566              		.loc 2 531 0
 1567              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1568 0176 97FAA7F7 		rbit r7, r7
 1569              	@ 0 "" 2
 1570              	.LVL132:
 1571              		.thumb
 1572              	.LBE41:
 1573              	.LBE40:
 1574              	.LBB42:
 1575              	.LBB43:
 1576 017a 4FF0380C 		mov	ip, #56
 1577              	.LBE43:
 1578              	.LBE42:
 1579              		.loc 1 1197 0
 1580 017e B7FA87F7 		clz	r7, r7
 1581              	.LVL133:
 1582              	.LBB45:
 1583              	.LBB44:
 1584              		.loc 2 531 0
 1585              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1586 0182 9CFAACFC 		rbit ip, ip
ARM GAS  /var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//cc05OIMQ.s 			page 60


 1587              	@ 0 "" 2
 1588              	.LVL134:
 1589              		.thumb
 1590              	.LBE44:
 1591              	.LBE45:
 1592              		.loc 1 1197 0
 1593 0186 4FF00709 		mov	r9, #7
 1594 018a BCFA8CFC 		clz	ip, ip
 1595              	.LVL135:
 1596 018e 5743     		muls	r7, r2, r7
 1597 0190 09FA07F7 		lsl	r7, r9, r7
 1598 0194 02FB0CFC 		mul	ip, r2, ip
 1599 0198 28EA0707 		bic	r7, r8, r7
 1600 019c 06FA0CF6 		lsl	r6, r6, ip
 1601 01a0 3E43     		orrs	r6, r6, r7
 1602 01a2 1E61     		str	r6, [r3, #16]
 1603              	.LVL136:
 1604              	.L149:
1198:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel)                       ,
1199:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) )
1200:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
1201:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
1202:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* If ADC1 InjectedChannel_16 or InjectedChannel_17 is selected, enable Temperature sensor  */
1203:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* and VREFINT measurement path.                                            */
1204:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 1605              		.loc 1 1204 0
 1606 01a4 A2F11006 		sub	r6, r2, #16
 1607 01a8 012E     		cmp	r6, #1
 1608 01aa 03D8     		bhi	.L150
1205:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)      )
1206:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {
1207:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 1609              		.loc 1 1207 0
 1610 01ac 9F68     		ldr	r7, [r3, #8]
 1611 01ae 47F40007 		orr	r7, r7, #8388608
 1612 01b2 9F60     		str	r7, [r3, #8]
 1613              	.L150:
1208:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
1209:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
1210:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
1211:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Configure the offset: offset enable/disable, InjectedChannel, offset value */
1212:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   switch(sConfigInjected->InjectedRank)
 1614              		.loc 1 1212 0
 1615 01b4 022D     		cmp	r5, #2
 1616 01b6 C968     		ldr	r1, [r1, #12]
 1617              	.LVL137:
 1618 01b8 0BD0     		beq	.L152
 1619 01ba 032D     		cmp	r5, #3
 1620 01bc 11D0     		beq	.L153
 1621 01be 012D     		cmp	r5, #1
 1622 01c0 17D1     		bne	.L162
1213:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {
1214:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     case 1:
1215:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       /* Set injected channel 1 offset */
1216:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       MODIFY_REG(hadc->Instance->JOFR1,
 1623              		.loc 1 1216 0
 1624 01c2 5D69     		ldr	r5, [r3, #20]
ARM GAS  /var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//cc05OIMQ.s 			page 61


 1625 01c4 25F47F65 		bic	r5, r5, #4080
 1626 01c8 25F00F05 		bic	r5, r5, #15
 1627 01cc 2943     		orrs	r1, r1, r5
 1628 01ce 5961     		str	r1, [r3, #20]
1217:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                  ADC_JOFR1_JOFFSET1,
1218:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                  sConfigInjected->InjectedOffset);
1219:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       break;
 1629              		.loc 1 1219 0
 1630 01d0 16E0     		b	.L155
 1631              	.L152:
1220:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     case 2:
1221:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       /* Set injected channel 2 offset */
1222:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       MODIFY_REG(hadc->Instance->JOFR2,
 1632              		.loc 1 1222 0
 1633 01d2 9D69     		ldr	r5, [r3, #24]
 1634 01d4 25F47F65 		bic	r5, r5, #4080
 1635 01d8 25F00F05 		bic	r5, r5, #15
 1636 01dc 2943     		orrs	r1, r1, r5
 1637 01de 9961     		str	r1, [r3, #24]
1223:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                  ADC_JOFR2_JOFFSET2,
1224:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                  sConfigInjected->InjectedOffset);
1225:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       break;
 1638              		.loc 1 1225 0
 1639 01e0 0EE0     		b	.L155
 1640              	.L153:
1226:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     case 3:
1227:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       /* Set injected channel 3 offset */
1228:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       MODIFY_REG(hadc->Instance->JOFR3,
 1641              		.loc 1 1228 0
 1642 01e2 DD69     		ldr	r5, [r3, #28]
 1643 01e4 25F47F65 		bic	r5, r5, #4080
 1644 01e8 25F00F05 		bic	r5, r5, #15
 1645 01ec 2943     		orrs	r1, r1, r5
 1646 01ee D961     		str	r1, [r3, #28]
1229:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                  ADC_JOFR3_JOFFSET3,
1230:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                  sConfigInjected->InjectedOffset);
1231:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       break;
 1647              		.loc 1 1231 0
 1648 01f0 06E0     		b	.L155
 1649              	.L162:
1232:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     case 4:
1233:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     default:
1234:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       MODIFY_REG(hadc->Instance->JOFR4,
 1650              		.loc 1 1234 0
 1651 01f2 1D6A     		ldr	r5, [r3, #32]
 1652 01f4 25F47F65 		bic	r5, r5, #4080
 1653 01f8 25F00F05 		bic	r5, r5, #15
 1654 01fc 2943     		orrs	r1, r1, r5
 1655 01fe 1962     		str	r1, [r3, #32]
 1656              	.L155:
1235:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                  ADC_JOFR4_JOFFSET4,
1236:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                  sConfigInjected->InjectedOffset);
1237:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       break;
1238:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
1239:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
1240:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
1241:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* and VREFINT measurement path.                                            */
ARM GAS  /var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//cc05OIMQ.s 			page 62


1242:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 1657              		.loc 1 1242 0
 1658 0200 012E     		cmp	r6, #1
 1659 0202 1DD8     		bhi	.L156
1243:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)      )
1244:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {
1245:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
1246:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* measurement channels (VrefInt/TempSensor). If these channels are       */
1247:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* intended to be set on other ADC instances, an error is reported.       */
1248:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     if (hadc->Instance == ADC1)
 1660              		.loc 1 1248 0
 1661 0204 1449     		ldr	r1, .L165+4
 1662 0206 8B42     		cmp	r3, r1
 1663 0208 15D1     		bne	.L157
1249:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
1250:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 1664              		.loc 1 1250 0
 1665 020a 9968     		ldr	r1, [r3, #8]
 1666 020c 0902     		lsls	r1, r1, #8
 1667 020e 17D4     		bmi	.L156
1251:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       {
1252:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 1668              		.loc 1 1252 0
 1669 0210 9968     		ldr	r1, [r3, #8]
1253:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         
1254:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR))
 1670              		.loc 1 1254 0
 1671 0212 102A     		cmp	r2, #16
1252:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 1672              		.loc 1 1252 0
 1673 0214 41F40001 		orr	r1, r1, #8388608
 1674 0218 9960     		str	r1, [r3, #8]
 1675              		.loc 1 1254 0
 1676 021a 11D1     		bne	.L156
1255:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         {
1256:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****           /* Delay for temperature sensor stabilization time */
1257:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****           /* Compute number of CPU cycles to wait for */
1258:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****           wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 1677              		.loc 1 1258 0
 1678 021c 0F4B     		ldr	r3, .L165+8
 1679 021e 1A68     		ldr	r2, [r3]
 1680 0220 0F4B     		ldr	r3, .L165+12
 1681 0222 B2FBF3F3 		udiv	r3, r2, r3
 1682 0226 0A22     		movs	r2, #10
 1683 0228 5343     		muls	r3, r2, r3
 1684              	.L164:
1259:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****           while(wait_loop_index != 0)
1260:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****           {
1261:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****             wait_loop_index--;
 1685              		.loc 1 1261 0
 1686 022a 0193     		str	r3, [sp, #4]
1259:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****           while(wait_loop_index != 0)
 1687              		.loc 1 1259 0
 1688 022c 019B     		ldr	r3, [sp, #4]
 1689 022e 3BB1     		cbz	r3, .L156
 1690              		.loc 1 1261 0
 1691 0230 019B     		ldr	r3, [sp, #4]
ARM GAS  /var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//cc05OIMQ.s 			page 63


 1692 0232 013B     		subs	r3, r3, #1
 1693 0234 F9E7     		b	.L164
 1694              	.L157:
1262:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****           }
1263:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         }
1264:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       }
1265:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
1266:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     else
1267:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
1268:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       /* Update ADC state machine to error */
1269:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 1695              		.loc 1 1269 0
 1696 0236 836A     		ldr	r3, [r0, #40]
 1697 0238 43F02003 		orr	r3, r3, #32
 1698 023c 8362     		str	r3, [r0, #40]
 1699              	.LVL138:
1270:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       
1271:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       tmp_hal_status = HAL_ERROR;
 1700              		.loc 1 1271 0
 1701 023e 0124     		movs	r4, #1
 1702              	.LVL139:
 1703              	.L156:
1272:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
1273:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
1274:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
1275:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Process unlocked */
1276:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   __HAL_UNLOCK(hadc);
 1704              		.loc 1 1276 0
 1705 0240 0023     		movs	r3, #0
 1706 0242 80F82430 		strb	r3, [r0, #36]
1277:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
1278:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Return function status */
1279:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   return tmp_hal_status;
 1707              		.loc 1 1279 0
 1708 0246 2046     		mov	r0, r4
 1709              	.LVL140:
 1710 0248 00E0     		b	.L136
 1711              	.LVL141:
 1712              	.L160:
1059:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 1713              		.loc 1 1059 0
 1714 024a 0220     		movs	r0, #2
 1715              	.LVL142:
 1716              	.L136:
1280:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** }
 1717              		.loc 1 1280 0
 1718 024c 02B0     		add	sp, sp, #8
 1719              		@ sp needed
 1720 024e BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 1721              	.L166:
 1722 0252 00BF     		.align	2
 1723              	.L165:
 1724 0254 003C0140 		.word	1073822720
 1725 0258 00240140 		.word	1073816576
 1726 025c 00000000 		.word	SystemCoreClock
 1727 0260 40420F00 		.word	1000000
 1728              		.cfi_endproc
ARM GAS  /var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//cc05OIMQ.s 			page 64


 1729              	.LFE74:
 1731              		.section	.text.HAL_ADCEx_MultiModeConfigChannel,"ax",%progbits
 1732              		.align	1
 1733              		.global	HAL_ADCEx_MultiModeConfigChannel
 1734              		.thumb
 1735              		.thumb_func
 1737              	HAL_ADCEx_MultiModeConfigChannel:
 1738              	.LFB75:
1281:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
1282:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** #if defined (STM32F101xG) || defined (STM32F103x6) || defined (STM32F103xB) || defined (STM32F105xC
1283:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** /**
1284:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @brief  Enable ADC multimode and configure multimode parameters
1285:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @note   Possibility to update parameters on the fly:
1286:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         This function initializes multimode parameters, following  
1287:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         calls to this function can be used to reconfigure some parameters 
1288:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         of structure "ADC_MultiModeTypeDef" on the fly, without reseting 
1289:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         the ADCs (both ADCs of the common group).
1290:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         The setting of these parameters is conditioned to ADC state.
1291:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         For parameters constraints, see comments of structure 
1292:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         "ADC_MultiModeTypeDef".
1293:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @note   To change back configuration from multimode to single mode, ADC must
1294:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         be reset (using function HAL_ADC_Init() ).
1295:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @param  hadc: ADC handle
1296:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @param  multimode: Structure of ADC multimode configuration
1297:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @retval HAL status
1298:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   */
1299:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* m
1300:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** {
 1739              		.loc 1 1300 0
 1740              		.cfi_startproc
 1741              		@ args = 0, pretend = 0, frame = 0
 1742              		@ frame_needed = 0, uses_anonymous_args = 0
 1743              	.LVL143:
1301:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
1302:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   ADC_HandleTypeDef tmphadcSlave;
1303:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
1304:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Check the parameters */
1305:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
1306:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   assert_param(IS_ADC_MODE(multimode->Mode));
1307:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
1308:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Process locked */
1309:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 1744              		.loc 1 1309 0
 1745 0000 90F82430 		ldrb	r3, [r0, #36]	@ zero_extendqisi2
 1746 0004 012B     		cmp	r3, #1
1300:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** {
 1747              		.loc 1 1300 0
 1748 0006 30B5     		push	{r4, r5, lr}
 1749              	.LCFI11:
 1750              		.cfi_def_cfa_offset 12
 1751              		.cfi_offset 4, -12
 1752              		.cfi_offset 5, -8
 1753              		.cfi_offset 14, -4
 1754              		.loc 1 1309 0
 1755 0008 21D0     		beq	.L171
 1756              		.loc 1 1309 0 is_stmt 0 discriminator 2
 1757 000a 0123     		movs	r3, #1
ARM GAS  /var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//cc05OIMQ.s 			page 65


 1758 000c 80F82430 		strb	r3, [r0, #36]
1310:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
1311:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Set a temporary handle of the ADC slave associated to the ADC master     */
1312:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
1313:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
1314:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Parameters update conditioned to ADC state:                              */
1315:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Parameters that can be updated when ADC is disabled or enabled without   */
1316:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* conversion on going on regular group:                                    */
1317:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*  - ADC master and ADC slave DMA configuration                            */
1318:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Parameters that can be updated only when ADC is disabled:                */
1319:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*  - Multimode mode selection                                              */
1320:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* To optimize code, all multimode settings can be set when both ADCs of    */
1321:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* the common group are in state: disabled.                                 */
1322:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   if ((ADC_IS_ENABLE(hadc) == RESET)                     &&
 1759              		.loc 1 1322 0 is_stmt 1 discriminator 2
 1760 0010 0368     		ldr	r3, [r0]
 1761 0012 9A68     		ldr	r2, [r3, #8]
 1762 0014 D207     		lsls	r2, r2, #31
 1763 0016 10D4     		bmi	.L169
1323:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       (ADC_IS_ENABLE(&tmphadcSlave) == RESET)            &&
 1764              		.loc 1 1323 0 discriminator 1
 1765 0018 0E4A     		ldr	r2, .L172
 1766 001a 9268     		ldr	r2, [r2, #8]
1322:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   if ((ADC_IS_ENABLE(hadc) == RESET)                     &&
 1767              		.loc 1 1322 0 discriminator 1
 1768 001c 12F00102 		ands	r2, r2, #1
 1769 0020 0BD1     		bne	.L169
 1770              		.loc 1 1323 0
 1771 0022 0D4C     		ldr	r4, .L172+4
 1772 0024 A342     		cmp	r3, r4
 1773 0026 08D1     		bne	.L169
1324:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       (IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance))   )
1325:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {
1326:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     MODIFY_REG(hadc->Instance->CR1,
 1774              		.loc 1 1326 0
 1775 0028 5D68     		ldr	r5, [r3, #4]
 1776 002a 0C68     		ldr	r4, [r1]
 1777 002c 25F47025 		bic	r5, r5, #983040
 1778 0030 45EA0401 		orr	r1, r5, r4
 1779              	.LVL144:
 1780 0034 5960     		str	r1, [r3, #4]
1301:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1781              		.loc 1 1301 0
 1782 0036 1346     		mov	r3, r2
 1783              		.loc 1 1326 0
 1784 0038 04E0     		b	.L170
 1785              	.LVL145:
 1786              	.L169:
1327:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                ADC_CR1_DUALMOD    ,
1328:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                multimode->Mode     );
1329:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
1330:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* If one of the ADC sharing the same common group is enabled, no update    */
1331:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* could be done on neither of the multimode structure parameters.          */
1332:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   else
1333:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {
1334:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Update ADC state machine to error */
1335:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
ARM GAS  /var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//cc05OIMQ.s 			page 66


 1787              		.loc 1 1335 0
 1788 003a 836A     		ldr	r3, [r0, #40]
 1789 003c 43F02003 		orr	r3, r3, #32
 1790 0040 8362     		str	r3, [r0, #40]
 1791              	.LVL146:
1336:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
1337:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     tmp_hal_status = HAL_ERROR;
 1792              		.loc 1 1337 0
 1793 0042 0123     		movs	r3, #1
 1794              	.LVL147:
 1795              	.L170:
1338:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
1339:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
1340:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
1341:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Process unlocked */
1342:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   __HAL_UNLOCK(hadc);
 1796              		.loc 1 1342 0
 1797 0044 0022     		movs	r2, #0
 1798 0046 80F82420 		strb	r2, [r0, #36]
1343:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
1344:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Return function status */
1345:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   return tmp_hal_status;
 1799              		.loc 1 1345 0
 1800 004a 1846     		mov	r0, r3
 1801              	.LVL148:
 1802 004c 30BD     		pop	{r4, r5, pc}
 1803              	.LVL149:
 1804              	.L171:
1309:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 1805              		.loc 1 1309 0
 1806 004e 0220     		movs	r0, #2
 1807              	.LVL150:
1346:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** } 
 1808              		.loc 1 1346 0
 1809 0050 30BD     		pop	{r4, r5, pc}
 1810              	.L173:
 1811 0052 00BF     		.align	2
 1812              	.L172:
 1813 0054 00280140 		.word	1073817600
 1814 0058 00240140 		.word	1073816576
 1815              		.cfi_endproc
 1816              	.LFE75:
 1818              		.text
 1819              	.Letext0:
 1820              		.file 3 "/Users/Arethusa/Library/Arduino15/packages/arduino/tools/arm-none-eabi-gcc/4.8.3-2014q1/a
 1821              		.file 4 "/Users/Arethusa/Library/Arduino15/packages/arduino/tools/arm-none-eabi-gcc/4.8.3-2014q1/a
 1822              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xe.h"
 1823              		.file 6 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f1xx.h"
 1824              		.file 7 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 1825              		.file 8 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 1826              		.file 9 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_adc.h"
 1827              		.file 10 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_adc_ex.h"
 1828              		.file 11 "Drivers/CMSIS/Include/core_cm3.h"
 1829              		.file 12 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 1830              		.file 13 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc_ex.h"
 1831              		.file 14 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
ARM GAS  /var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//cc05OIMQ.s 			page 67


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f1xx_hal_adc_ex.c
/var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//cc05OIMQ.s:19     .text.HAL_ADCEx_Calibration_Start:0000000000000000 $t
/var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//cc05OIMQ.s:24     .text.HAL_ADCEx_Calibration_Start:0000000000000000 HAL_ADCEx_Calibration_Start
/var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//cc05OIMQ.s:179    .text.HAL_ADCEx_Calibration_Start:00000000000000cc $d
/var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//cc05OIMQ.s:184    .text.HAL_ADCEx_InjectedStart:0000000000000000 $t
/var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//cc05OIMQ.s:189    .text.HAL_ADCEx_InjectedStart:0000000000000000 HAL_ADCEx_InjectedStart
/var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//cc05OIMQ.s:312    .text.HAL_ADCEx_InjectedStart:00000000000000a8 $d
/var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//cc05OIMQ.s:317    .text.HAL_ADCEx_InjectedStop:0000000000000000 $t
/var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//cc05OIMQ.s:322    .text.HAL_ADCEx_InjectedStop:0000000000000000 HAL_ADCEx_InjectedStop
/var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//cc05OIMQ.s:394    .text.HAL_ADCEx_InjectedPollForConversion:0000000000000000 $t
/var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//cc05OIMQ.s:399    .text.HAL_ADCEx_InjectedPollForConversion:0000000000000000 HAL_ADCEx_InjectedPollForConversion
/var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//cc05OIMQ.s:633    .text.HAL_ADCEx_InjectedPollForConversion:000000000000012c $d
/var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//cc05OIMQ.s:643    .text.HAL_ADCEx_InjectedStart_IT:0000000000000000 $t
/var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//cc05OIMQ.s:648    .text.HAL_ADCEx_InjectedStart_IT:0000000000000000 HAL_ADCEx_InjectedStart_IT
/var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//cc05OIMQ.s:775    .text.HAL_ADCEx_InjectedStart_IT:00000000000000b0 $d
/var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//cc05OIMQ.s:780    .text.HAL_ADCEx_InjectedStop_IT:0000000000000000 $t
/var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//cc05OIMQ.s:785    .text.HAL_ADCEx_InjectedStop_IT:0000000000000000 HAL_ADCEx_InjectedStop_IT
/var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//cc05OIMQ.s:862    .text.HAL_ADCEx_MultiModeStart_DMA:0000000000000000 $t
/var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//cc05OIMQ.s:867    .text.HAL_ADCEx_MultiModeStart_DMA:0000000000000000 HAL_ADCEx_MultiModeStart_DMA
/var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//cc05OIMQ.s:1021   .text.HAL_ADCEx_MultiModeStart_DMA:00000000000000cc $d
/var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//cc05OIMQ.s:1030   .text.HAL_ADCEx_MultiModeStop_DMA:0000000000000000 $t
/var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//cc05OIMQ.s:1035   .text.HAL_ADCEx_MultiModeStop_DMA:0000000000000000 HAL_ADCEx_MultiModeStop_DMA
/var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//cc05OIMQ.s:1146   .text.HAL_ADCEx_MultiModeStop_DMA:0000000000000080 $d
/var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//cc05OIMQ.s:1151   .text.HAL_ADCEx_InjectedGetValue:0000000000000000 $t
/var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//cc05OIMQ.s:1156   .text.HAL_ADCEx_InjectedGetValue:0000000000000000 HAL_ADCEx_InjectedGetValue
/var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//cc05OIMQ.s:1202   .text.HAL_ADCEx_MultiModeGetValue:0000000000000000 $t
/var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//cc05OIMQ.s:1207   .text.HAL_ADCEx_MultiModeGetValue:0000000000000000 HAL_ADCEx_MultiModeGetValue
/var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//cc05OIMQ.s:1235   .text.HAL_ADCEx_MultiModeGetValue:0000000000000018 $d
/var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//cc05OIMQ.s:1241   .text.HAL_ADCEx_InjectedConvCpltCallback:0000000000000000 $t
/var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//cc05OIMQ.s:1246   .text.HAL_ADCEx_InjectedConvCpltCallback:0000000000000000 HAL_ADCEx_InjectedConvCpltCallback
/var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//cc05OIMQ.s:1259   .text.HAL_ADCEx_InjectedConfigChannel:0000000000000000 $t
/var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//cc05OIMQ.s:1264   .text.HAL_ADCEx_InjectedConfigChannel:0000000000000000 HAL_ADCEx_InjectedConfigChannel
/var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//cc05OIMQ.s:1724   .text.HAL_ADCEx_InjectedConfigChannel:0000000000000254 $d
/var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//cc05OIMQ.s:1732   .text.HAL_ADCEx_MultiModeConfigChannel:0000000000000000 $t
/var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//cc05OIMQ.s:1737   .text.HAL_ADCEx_MultiModeConfigChannel:0000000000000000 HAL_ADCEx_MultiModeConfigChannel
/var/folders/19/rz7506jh8xn7x1006s6s574h0000gn/T//cc05OIMQ.s:1813   .text.HAL_ADCEx_MultiModeConfigChannel:0000000000000054 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
ADC_ConversionStop_Disable
HAL_RCCEx_GetPeriphCLKFreq
ADC_Enable
HAL_GetTick
SystemCoreClock
HAL_DMA_Start_IT
ADC_DMAConvCplt
ADC_DMAHalfConvCplt
ADC_DMAError
HAL_DMA_Abort
